"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidUiautomator2Driver = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
var _uiautomator = require("./uiautomator2");
var _methodMap = require("./method-map");
var _support = require("appium/support");
var _asyncbox = require("asyncbox");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _index = _interopRequireDefault(require("./commands/index"));
var _appiumAdb = require("appium-adb");
var _helpers = _interopRequireDefault(require("./helpers"));
var _appiumAndroidDriver = require("appium-android-driver");
var _desiredCaps = _interopRequireDefault(require("./desired-caps"));
var _portscanner = require("portscanner");
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _extensions = require("./extensions");
const helpers = Object.assign({}, _helpers.default, _appiumAndroidDriver.androidHelpers);
const DEVICE_PORT_RANGE = [8200, 8299];
const DEVICE_PORT_ALLOCATION_GUARD = _support.util.getLockFileGuard(_path.default.resolve(_os.default.tmpdir(), 'uia2_device_port_guard'), {
  timeout: 25,
  tryRecovery: true
});
const DEVICE_PORT = 6790;
const MJPEG_SERVER_DEVICE_PORT = 7810;
const LOCALHOST_IP4 = '127.0.0.1';
const NO_PROXY = [['GET', new RegExp('^/session/(?!.*/)')], ['GET', new RegExp('^/session/[^/]+/alert_[^/]+')], ['GET', new RegExp('^/session/[^/]+/alert/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_activity')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_package')], ['GET', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/device/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/settings')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/attribute')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/displayed')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/enabled')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/location_in_view')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/name')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/selected')], ['GET', new RegExp('^/session/[^/]+/ime/[^/]+')], ['GET', new RegExp('^/session/[^/]+/location')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['GET', new RegExp('^/session/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/timeouts')], ['GET', new RegExp('^/session/[^/]+/url')], ['POST', new RegExp('^/session/[^/]+/[^/]+_alert$')], ['POST', new RegExp('^/session/[^/]+/actions')], ['POST', new RegExp('^/session/[^/]+/alert/[^/]+')], ['POST', new RegExp('^/session/[^/]+/app/[^/]')], ['POST', new RegExp('^/session/[^/]+/appium/[^/]+/start_activity')], ['POST', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/compare_images')], ['POST', new RegExp('^/session/[^/]+/appium/device/(?!set_clipboard)[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/replace_value')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/value')], ['POST', new RegExp('^/session/[^/]+/appium/getPerformanceData')], ['POST', new RegExp('^/session/[^/]+/appium/performanceData/types')], ['POST', new RegExp('^/session/[^/]+/appium/settings')], ['POST', new RegExp('^/session/[^/]+/appium/execute_driver')], ['POST', new RegExp('^/session/[^/]+/appium/start_recording_screen')], ['POST', new RegExp('^/session/[^/]+/appium/stop_recording_screen')], ['POST', new RegExp('^/session/[^/]+/appium/.*event')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/element')], ['POST', new RegExp('^/session/[^/]+/ime/[^/]+')], ['POST', new RegExp('^/session/[^/]+/keys')], ['POST', new RegExp('^/session/[^/]+/location')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/timeouts')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/url')], ['GET', new RegExp('^/session/[^/]+/log/types')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute_async')], ['POST', new RegExp('^/session/[^/]+/log')], ['GET', new RegExp('^/session/[^/]+/se/log/types')], ['GET', new RegExp('^/session/[^/]+/window/rect')], ['POST', new RegExp('^/session/[^/]+/execute/async')], ['POST', new RegExp('^/session/[^/]+/execute/sync')], ['POST', new RegExp('^/session/[^/]+/se/log')]];
const CHROME_NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/rect')], ['GET', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/execute$')], ['POST', new RegExp('^/session/[^/]+/execute/sync')], ['GET', new RegExp('^/session/[^/]+/log/types$')], ['POST', new RegExp('^/session/[^/]+/log$')], ['GET', new RegExp('^/session/[^/]+/se/log/types$')], ['POST', new RegExp('^/session/[^/]+/se/log$')]];
const MEMOIZED_FUNCTIONS = ['getStatusBarHeight', 'getDevicePixelRatio'];
class AndroidUiautomator2Driver extends _driver.BaseDriver {
  static newMethodMap = _methodMap.newMethodMap;
  constructor(opts = {}, shouldValidateCaps = true) {
    delete opts.shell;
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', 'css selector', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.uiautomator2 = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {};
    this.settings = new _driver.DeviceSettings({
      ignoreUnimportantViews: false,
      allowInvisibleElements: false
    }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.sessionChromedrivers = {};
    for (const fn of MEMOIZED_FUNCTIONS) {
      this[fn] = _lodash.default.memoize(this[fn]);
    }
  }
  validateDesiredCaps(caps) {
    return super.validateDesiredCaps(caps) && _appiumAndroidDriver.androidHelpers.validateDesiredCaps(caps);
  }
  async createSession(...args) {
    try {
      let [sessionId, caps] = await super.createSession(...args);
      let serverDetails = {
        platform: 'LINUX',
        webStorageEnabled: false,
        takesScreenshot: true,
        javascriptEnabled: true,
        databaseEnabled: false,
        networkConnectionEnabled: true,
        locationContextEnabled: false,
        warnings: {},
        desired: this.caps
      };
      this.caps = Object.assign(serverDetails, this.caps);
      this.curContext = this.defaultContextName();
      let defaultOpts = {
        fullReset: false,
        autoLaunch: true,
        adbPort: _appiumAdb.DEFAULT_ADB_PORT,
        androidInstallTimeout: 90000
      };
      _lodash.default.defaults(this.opts, defaultOpts);
      if (this.isChromeSession) {
        this.log.info("We're going to run a Chrome-based session");
        let {
          pkg,
          activity
        } = helpers.getChromePkg(this.opts.browserName);
        this.opts.appPackage = this.caps.appPackage = pkg;
        this.opts.appActivity = this.caps.appActivity = activity;
        this.log.info(`Chrome-type package and activity are ${pkg} and ${activity}`);
      }
      if (this.opts.reboot) {
        this.setAvdFromCapabilities(caps);
      }
      if (this.opts.app) {
        this.opts.app = await this.helpers.configureApp(this.opts.app, [_extensions.APK_EXTENSION, _extensions.APKS_EXTENSION]);
        await this.checkAppPresent();
      } else if (this.opts.appPackage) {
        this.log.info(`Starting '${this.opts.appPackage}' directly on the device`);
      } else {
        this.log.info(`Neither 'app' nor 'appPackage' was set. Starting UiAutomator2 ` + 'without the target application');
      }
      this.opts.adbPort = this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
      await this.startUiAutomator2Session();
      await this.fillDeviceDetails();
      if (this.opts.mjpegScreenshotUrl) {
        this.log.info(`Starting MJPEG stream reading URL: '${this.opts.mjpegScreenshotUrl}'`);
        this.mjpegStream = new _support.mjpeg.MJpegStream(this.opts.mjpegScreenshotUrl);
        await this.mjpegStream.start();
      }
      return [sessionId, this.caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }
  async fillDeviceDetails() {
    this.caps.pixelRatio = await this.getDevicePixelRatio();
    this.caps.statBarHeight = await this.getStatusBarHeight();
    this.caps.viewportRect = await this.getViewPortRect();
  }
  get driverData() {
    return {};
  }
  async getSession() {
    let sessionData = await super.getSession();
    this.log.debug('Getting session details from server to mix in');
    let uia2Data = await this.uiautomator2.jwproxy.command('/', 'GET', {});
    return Object.assign({}, sessionData, uia2Data);
  }
  isEmulator() {
    return helpers.isEmulator(this.adb, this.opts);
  }
  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      this.log.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        this.log.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }
      if (!caps.platformVersion) {
        this.log.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }
      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, '-');
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }
  async allocateSystemPort() {
    const forwardPort = async localPort => {
      this.log.debug(`Forwarding UiAutomator2 Server port ${DEVICE_PORT} to local port ${localPort}`);
      if ((await (0, _portscanner.checkPortStatus)(localPort, LOCALHOST_IP4)) === 'open') {
        this.log.errorAndThrow(`UiAutomator2 Server cannot start because the local port #${localPort} is busy. ` + `Make sure the port you provide via 'systemPort' capability is not occupied. ` + `This situation might often be a result of an inaccurate sessions management, e.g. ` + `old automation sessions on the same device must always be closed before starting new ones.`);
      }
      await this.adb.forwardPort(localPort, DEVICE_PORT);
    };
    if (this.opts.systemPort) {
      this._hasSystemPortInCaps = true;
      return await forwardPort(this.opts.systemPort);
    }
    await DEVICE_PORT_ALLOCATION_GUARD(async () => {
      const [startPort, endPort] = DEVICE_PORT_RANGE;
      try {
        this.opts.systemPort = await (0, _portscanner.findAPortNotInUse)(startPort, endPort);
      } catch (e) {
        this.log.errorAndThrow(`Cannot find any free port in range ${startPort}..${endPort}}. ` + `Please set the available port number by providing the systemPort capability or ` + `double check the processes that are locking ports within this range and terminate ` + `these which are not needed anymore`);
      }
      await forwardPort(this.opts.systemPort);
    });
  }
  async releaseSystemPort() {
    if (!this.opts.systemPort || !this.adb) {
      return;
    }
    if (this._hasSystemPortInCaps) {
      await this.adb.removePortForward(this.opts.systemPort);
    } else {
      await DEVICE_PORT_ALLOCATION_GUARD(async () => await this.adb.removePortForward(this.opts.systemPort));
    }
  }
  async allocateMjpegServerPort() {
    if (this.opts.mjpegServerPort) {
      await this.adb.forwardPort(this.opts.mjpegServerPort, MJPEG_SERVER_DEVICE_PORT);
    }
  }
  async releaseMjpegServerPort() {
    if (this.opts.mjpegServerPort) {
      await this.adb.removePortForward(this.opts.mjpegServerPort);
    }
  }
  async startUiAutomator2Session() {
    let {
      udid,
      emPort
    } = await helpers.getDeviceInfoFromCaps(this.opts);
    this.opts.udid = udid;
    this.opts.emPort = emPort;
    this.adb = await _appiumAndroidDriver.androidHelpers.createADB(this.opts);
    const apiLevel = await this.adb.getApiLevel();
    if (apiLevel < 21) {
      this.log.errorAndThrow('UIAutomator2 is only supported since Android 5.0 (Lollipop). ' + 'You could still use other supported backends in order to automate older Android versions.');
    }
    if (apiLevel >= 28) {
      this.log.info('Relaxing hidden api policy');
      await this.adb.setHiddenApiPolicy('1', !!this.opts.ignoreHiddenApiPolicyError);
    }
    if (_support.util.hasValue(this.opts.gpsEnabled)) {
      if (this.isEmulator()) {
        this.log.info(`Trying to ${this.opts.gpsEnabled ? 'enable' : 'disable'} gps location provider`);
        await this.adb.toggleGPSLocationProvider(this.opts.gpsEnabled);
      } else {
        this.log.warn(`Sorry! 'gpsEnabled' capability is only available for emulators`);
      }
    }
    const appInfo = await helpers.getLaunchInfo(this.adb, this.opts);
    Object.assign(this.opts, appInfo || {});
    this.caps.deviceName = this.adb.curDeviceId;
    this.caps.deviceUDID = this.opts.udid;
    this.defaultIME = await helpers.initDevice(this.adb, this.opts);
    await this.allocateSystemPort();
    await this.allocateMjpegServerPort();
    await this.initUiAutomator2Server();
    if (this.opts.disableWindowAnimation && (await this.adb.getApiLevel()) < 26) {
      if (await this.adb.isAnimationOn()) {
        this.log.info('Disabling animation via io.appium.settings');
        await this.adb.setAnimationState(false);
        this._wasWindowAnimationDisabled = true;
      } else {
        this.log.info('Window animation is already disabled');
      }
    }
    await this.initAUT();
    if (!this.caps.appPackage && appInfo) {
      this.caps.appPackage = appInfo.appPackage;
    }
    await this.uiautomator2.startSession(this.caps);
    await this.addDeviceInfoToCaps();
    if (!this.opts.skipUnlock) {
      await helpers.unlock(this, this.adb, this.caps);
    } else {
      this.log.debug(`'skipUnlock' capability set, so skipping device unlock`);
    }
    if (this.isChromeSession) {
      await this.startChromeSession(this);
    } else if (this.opts.autoLaunch && this.opts.appPackage) {
      await this.ensureAppStarts();
    }
    if (_support.util.hasValue(this.opts.orientation)) {
      this.log.debug(`Setting initial orientation to '${this.opts.orientation}'`);
      await this.setOrientation(this.opts.orientation);
    }
    if (this.opts.autoWebview) {
      const viewName = this.defaultWebviewName();
      const timeout = this.opts.autoWebviewTimeout || 2000;
      this.log.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);
      await (0, _asyncbox.retryInterval)(timeout / 500, 500, this.setContext.bind(this), viewName);
    }
    this.jwpProxyActive = true;
  }
  async addDeviceInfoToCaps() {
    const {
      apiVersion,
      platformVersion,
      manufacturer,
      model,
      realDisplaySize,
      displayDensity
    } = await this.mobileGetDeviceInfo();
    this.caps.deviceApiLevel = parseInt(apiVersion, 10);
    this.caps.platformVersion = platformVersion;
    this.caps.deviceScreenSize = realDisplaySize;
    this.caps.deviceScreenDensity = displayDensity;
    this.caps.deviceModel = model;
    this.caps.deviceManufacturer = manufacturer;
  }
  async initUiAutomator2Server() {
    const uiautomator2Opts = {
      host: this.opts.remoteAdbHost || this.opts.host || LOCALHOST_IP4,
      systemPort: this.opts.systemPort,
      devicePort: DEVICE_PORT,
      adb: this.adb,
      apk: this.opts.app,
      tmpDir: this.opts.tmpDir,
      appPackage: this.opts.appPackage,
      appActivity: this.opts.appActivity,
      disableWindowAnimation: !!this.opts.disableWindowAnimation,
      disableSuppressAccessibilityService: this.opts.disableSuppressAccessibilityService,
      readTimeout: this.opts.uiautomator2ServerReadTimeout
    };
    this.uiautomator2 = new _uiautomator.UiAutomator2Server(this.log, uiautomator2Opts);
    this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);
    this.proxyCommand = this.uiautomator2.proxyCommand.bind(this.uiautomator2);
    if (this.opts.skipServerInstallation) {
      this.log.info(`'skipServerInstallation' is set. Skipping UIAutomator2 server installation.`);
    } else {
      await this.uiautomator2.installServerApk(this.opts.uiautomator2ServerInstallTimeout);
      try {
        await this.adb.addToDeviceIdleWhitelist(_appiumAndroidDriver.SETTINGS_HELPER_PKG_ID, _uiautomator.SERVER_PACKAGE_ID, _uiautomator.SERVER_TEST_PACKAGE_ID);
      } catch (e) {
        this.log.warn(`Cannot add server packages to the Doze whitelist. Original error: ` + (e.stderr || e.message));
      }
    }
  }
  async initAUT() {
    if (this.opts.uninstallOtherPackages) {
      await helpers.uninstallOtherPackages(this.adb, helpers.parseArray(this.opts.uninstallOtherPackages), [_appiumAndroidDriver.SETTINGS_HELPER_PKG_ID, _uiautomator.SERVER_PACKAGE_ID, _uiautomator.SERVER_TEST_PACKAGE_ID]);
    }
    if (this.opts.otherApps) {
      let otherApps;
      try {
        otherApps = helpers.parseArray(this.opts.otherApps);
      } catch (e) {
        this.log.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
      }
      otherApps = await _bluebird.default.all(otherApps.map(app => this.helpers.configureApp(app, [_extensions.APK_EXTENSION, _extensions.APKS_EXTENSION])));
      await helpers.installOtherApks(otherApps, this.adb, this.opts);
    }
    if (this.opts.app) {
      if (this.opts.noReset && !(await this.adb.isAppInstalled(this.opts.appPackage)) || !this.opts.noReset) {
        if (!this.opts.noSign && !(await this.adb.checkApkCert(this.opts.app, this.opts.appPackage, {
          requireDefaultCert: false
        }))) {
          await helpers.signApp(this.adb, this.opts.app);
        }
        if (!this.opts.skipUninstall) {
          await this.adb.uninstallApk(this.opts.appPackage);
        }
        await helpers.installApk(this.adb, this.opts);
      } else {
        this.log.debug('noReset has been requested and the app is already installed. Doing nothing');
      }
    } else {
      if (this.opts.fullReset) {
        this.log.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
      }
      this.log.debug('No app capability. Assuming it is already on the device');
      if (this.opts.fastReset && this.opts.appPackage) {
        await helpers.resetApp(this.adb, this.opts);
      }
    }
  }
  async ensureAppStarts() {
    const appWaitPackage = this.opts.appWaitPackage || this.opts.appPackage;
    const appWaitActivity = this.opts.appWaitActivity || this.opts.appActivity;
    this.log.info(`Starting '${this.opts.appPackage}/${this.opts.appActivity} ` + `and waiting for '${appWaitPackage}/${appWaitActivity}'`);
    if (this.caps.androidCoverage) {
      this.log.info(`androidCoverage is configured. ` + ` Starting instrumentation of '${this.caps.androidCoverage}'...`);
      await this.adb.androidCoverage(this.caps.androidCoverage, appWaitPackage, appWaitActivity);
      return;
    }
    if (this.opts.noReset && !this.opts.forceAppLaunch && (await this.adb.processExists(this.opts.appPackage))) {
      this.log.info(`'${this.opts.appPackage}' is already running and noReset is enabled. ` + `Set forceAppLaunch capability to true if the app must be forcefully restarted on session startup.`);
      return;
    }
    await this.adb.startApp({
      pkg: this.opts.appPackage,
      activity: this.opts.appActivity,
      action: this.opts.intentAction || 'android.intent.action.MAIN',
      category: this.opts.intentCategory || 'android.intent.category.LAUNCHER',
      flags: this.opts.intentFlags || '0x10200000',
      waitPkg: this.opts.appWaitPackage,
      waitActivity: this.opts.appWaitActivity,
      waitForLaunch: this.opts.appWaitForLaunch,
      waitDuration: this.opts.appWaitDuration,
      optionalIntentArguments: this.opts.optionalIntentArguments,
      stopApp: this.opts.forceAppLaunch || !this.opts.dontStopAppOnReset,
      retry: true,
      user: this.opts.userProfile
    });
  }
  async deleteSession() {
    this.log.debug('Deleting UiAutomator2 session');
    const screenRecordingStopTasks = [async () => {
      if (!_lodash.default.isEmpty(this._screenRecordingProperties)) {
        await this.stopRecordingScreen();
      }
    }, async () => {
      if (await this.mobileIsMediaProjectionRecordingRunning()) {
        await this.mobileStopMediaProjectionRecording();
      }
    }, async () => {
      if (!_lodash.default.isEmpty(this._screenStreamingProps)) {
        await this.mobileStopScreenStreaming();
      }
    }];
    await _appiumAndroidDriver.androidHelpers.removeAllSessionWebSocketHandlers(this.server, this.sessionId);
    if (this.uiautomator2) {
      try {
        await this.stopChromedriverProxies();
      } catch (err) {
        this.log.warn(`Unable to stop ChromeDriver proxies: ${err.message}`);
      }
      if (this.jwpProxyActive) {
        try {
          await this.uiautomator2.deleteSession();
        } catch (err) {
          this.log.warn(`Unable to proxy deleteSession to UiAutomator2: ${err.message}`);
        }
      }
      this.uiautomator2 = null;
    }
    this.jwpProxyActive = false;
    if (this.adb) {
      await _bluebird.default.all(screenRecordingStopTasks.map(task => {
        (async () => {
          try {
            await task();
          } catch (ign) {}
        })();
      }));
      if (this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME) {
        this.log.debug(`Resetting IME to '${this.defaultIME}'`);
        try {
          await this.adb.setIME(this.defaultIME);
        } catch (err) {
          this.log.warn(`Unable to reset IME: ${err.message}`);
        }
      }
      if (this.caps.androidCoverage) {
        this.log.info('Shutting down the adb process of instrumentation...');
        await this.adb.endAndroidCoverage();
        if (this.caps.androidCoverageEndIntent) {
          this.log.info(`Sending intent broadcast '${this.caps.androidCoverageEndIntent}' at the end of instrumenting.`);
          await this.adb.broadcast(this.caps.androidCoverageEndIntent);
        } else {
          this.log.warn('No androidCoverageEndIntent is configured in caps. Possibly you cannot get coverage file.');
        }
      }
      if (this.opts.appPackage) {
        if (!this.isChromeSession && !this.opts.dontStopAppOnReset && !this.opts.noReset) {
          try {
            await this.adb.forceStop(this.opts.appPackage);
          } catch (err) {
            this.log.warn(`Unable to force stop app: ${err.message}`);
          }
        }
        if (this.opts.fullReset && !this.opts.skipUninstall) {
          this.log.debug(`Capability 'fullReset' set to 'true', Uninstalling '${this.opts.appPackage}'`);
          try {
            await this.adb.uninstallApk(this.opts.appPackage);
          } catch (err) {
            this.log.warn(`Unable to uninstall app: ${err.message}`);
          }
        }
      }
      if (this._wasWindowAnimationDisabled) {
        this.log.info('Restoring window animation state');
        await this.adb.setAnimationState(true);
      }
      await this.adb.stopLogcat();
      try {
        await this.releaseSystemPort();
      } catch (error) {
        this.log.warn(`Unable to remove system port forward: ${error.message}`);
      }
      try {
        await this.releaseMjpegServerPort();
      } catch (error) {
        this.log.warn(`Unable to remove MJPEG server port forward: ${error.message}`);
      }
      if ((await this.adb.getApiLevel()) >= 28) {
        this.log.info('Restoring hidden api policy to the device default configuration');
        await this.adb.setDefaultHiddenApiPolicy(!!this.opts.ignoreHiddenApiPolicyError);
      }
      if (this.opts.reboot) {
        let avdName = this.opts.avd.replace('@', '');
        this.log.debug(`Closing emulator '${avdName}'`);
        try {
          await this.adb.killEmulator(avdName);
        } catch (err) {
          this.log.warn(`Unable to close emulator: ${err.message}`);
        }
      }
    }
    if (this.mjpegStream) {
      this.log.info('Closing MJPEG stream');
      this.mjpegStream.stop();
    }
    await super.deleteSession();
  }
  async checkAppPresent() {
    this.log.debug('Checking whether app is actually present');
    if (!(await _support.fs.exists(this.opts.app))) {
      this.log.errorAndThrow(`Could not find app apk at '${this.opts.app}'`);
    }
  }
  async onSettingsUpdate() {}
  async wrapBootstrapDisconnect(wrapped) {
    await wrapped();
    await this.adb.restart();
    await this.allocateSystemPort();
    await this.allocateMjpegServerPort();
  }
  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return true;
  }
  canProxy(sessionId) {
    super.canProxy(sessionId);
    return true;
  }
  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    if (_support.util.hasValue(this.chromedriver)) {
      this.jwpProxyAvoid = CHROME_NO_PROXY;
    } else {
      this.jwpProxyAvoid = NO_PROXY;
    }
    if (this.opts.nativeWebScreenshot) {
      this.jwpProxyAvoid = [...this.jwpProxyAvoid, ['GET', new RegExp('^/session/[^/]+/screenshot')]];
    }
    return this.jwpProxyAvoid;
  }
  get isChromeSession() {
    return helpers.isChromeBrowser(this.opts.browserName);
  }
}
exports.AndroidUiautomator2Driver = AndroidUiautomator2Driver;
for (let [cmd, fn] of _lodash.default.toPairs(_appiumAndroidDriver.androidCommands)) {
  AndroidUiautomator2Driver.prototype[cmd] = fn;
}
for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  AndroidUiautomator2Driver.prototype[cmd] = fn;
}
var _default = AndroidUiautomator2Driver;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,