"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _path = _interopRequireDefault(require("path"));
var _support = require("appium/support");
let helpers = {};
helpers.ensureInternetPermissionForApp = async function (adb, app) {
  let has = await adb.hasInternetPermissionFromManifest(app);
  if (has) {
    return;
  }
  let msg = 'Your apk does not have INTERNET permissions. Uiautomator2 needs ' + 'the internet permission to proceed. Please check if you have ' + '<uses-permission android:name="android.**permission.INTERNET"/>' + 'in your AndroidManifest.xml';
  throw new Error(msg);
};
helpers.isWriteable = async function isWriteable(filePath) {
  try {
    await _support.fs.access(filePath, _support.fs.W_OK);
    if (_support.system.isWindows()) {
      await _support.fs.close(await _support.fs.open(filePath, 'r+'));
    }
    return true;
  } catch (ign) {
    return false;
  }
};
helpers.signApp = async function (adb, appPath) {
  if (!(await this.isWriteable(appPath))) {
    throw new Error(`The application at '${appPath}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(appPath)}' ` + `for the Appium process, so it could sign the application`);
  }
  await adb.sign(appPath);
};
var _default = helpers;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoZWxwZXJzIiwiZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwIiwiYWRiIiwiYXBwIiwiaGFzIiwiaGFzSW50ZXJuZXRQZXJtaXNzaW9uRnJvbU1hbmlmZXN0IiwibXNnIiwiRXJyb3IiLCJpc1dyaXRlYWJsZSIsImZpbGVQYXRoIiwiZnMiLCJhY2Nlc3MiLCJXX09LIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwiY2xvc2UiLCJvcGVuIiwiaWduIiwic2lnbkFwcCIsImFwcFBhdGgiLCJwYXRoIiwiZGlybmFtZSIsInNpZ24iXSwic291cmNlcyI6WyIuLi8uLi9saWIvaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCBzeXN0ZW0gfSBmcm9tICdhcHBpdW0vc3VwcG9ydCc7XG5cblxubGV0IGhlbHBlcnMgPSB7fTtcblxuaGVscGVycy5lbnN1cmVJbnRlcm5ldFBlcm1pc3Npb25Gb3JBcHAgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBhcHApIHtcbiAgbGV0IGhhcyA9IGF3YWl0IGFkYi5oYXNJbnRlcm5ldFBlcm1pc3Npb25Gcm9tTWFuaWZlc3QoYXBwKTtcbiAgaWYgKGhhcykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbXNnID0gJ1lvdXIgYXBrIGRvZXMgbm90IGhhdmUgSU5URVJORVQgcGVybWlzc2lvbnMuIFVpYXV0b21hdG9yMiBuZWVkcyAnICtcbiAgICAgICAgICAgICd0aGUgaW50ZXJuZXQgcGVybWlzc2lvbiB0byBwcm9jZWVkLiBQbGVhc2UgY2hlY2sgaWYgeW91IGhhdmUgJyArXG4gICAgICAgICAgICAnPHVzZXMtcGVybWlzc2lvbiBhbmRyb2lkOm5hbWU9XCJhbmRyb2lkLioqcGVybWlzc2lvbi5JTlRFUk5FVFwiLz4nICtcbiAgICAgICAgICAgICdpbiB5b3VyIEFuZHJvaWRNYW5pZmVzdC54bWwnO1xuICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbn07XG5cbmhlbHBlcnMuaXNXcml0ZWFibGUgPSBhc3luYyBmdW5jdGlvbiBpc1dyaXRlYWJsZSAoZmlsZVBhdGgpIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy5hY2Nlc3MoZmlsZVBhdGgsIGZzLldfT0spO1xuICAgIGlmIChzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcbiAgICAgIC8vIE9uIG9wZXJhdGluZyBzeXN0ZW1zLCB3aGVyZSBhY2Nlc3MtY29udHJvbCBwb2xpY2llcyBtYXlcbiAgICAgIC8vIGxpbWl0IGFjY2VzcyB0byB0aGUgZmlsZSBzeXN0ZW0sIGBmcy5hY2Nlc3NgIGRvZXMgbm90IHdvcmtcbiAgICAgIC8vIGFzIGV4cGVjdGVkLiBTZWUgaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIXRvcGljL25vZGVqcy9xbVp0SXdEUlNZb1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlsc1xuICAgICAgYXdhaXQgZnMuY2xvc2UoYXdhaXQgZnMub3BlbihmaWxlUGF0aCwgJ3IrJykpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5oZWxwZXJzLnNpZ25BcHAgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBhcHBQYXRoKSB7XG4gIGlmICghYXdhaXQgdGhpcy5pc1dyaXRlYWJsZShhcHBQYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGFwcGxpY2F0aW9uIGF0ICcke2FwcFBhdGh9JyBpcyBub3Qgd3JpdGVhYmxlLiBgICtcbiAgICAgIGBQbGVhc2UgZ3JhbnQgd3JpdGUgcGVybWlzc2lvbnMgdG8gdGhpcyBmaWxlIG9yIHRvIGl0cyBwYXJlbnQgZm9sZGVyICcke3BhdGguZGlybmFtZShhcHBQYXRoKX0nIGAgK1xuICAgICAgYGZvciB0aGUgQXBwaXVtIHByb2Nlc3MsIHNvIGl0IGNvdWxkIHNpZ24gdGhlIGFwcGxpY2F0aW9uYCk7XG4gIH1cbiAgYXdhaXQgYWRiLnNpZ24oYXBwUGF0aCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoZWxwZXJzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFHQSxJQUFJQSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhCQSxPQUFPLENBQUNDLDhCQUE4QixHQUFHLGdCQUFnQkMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDakUsSUFBSUMsR0FBRyxHQUFHLE1BQU1GLEdBQUcsQ0FBQ0csaUNBQWlDLENBQUNGLEdBQUcsQ0FBQztFQUMxRCxJQUFJQyxHQUFHLEVBQUU7SUFDUDtFQUNGO0VBQ0EsSUFBSUUsR0FBRyxHQUFHLGtFQUFrRSxHQUNsRSwrREFBK0QsR0FDL0QsaUVBQWlFLEdBQ2pFLDZCQUE2QjtFQUN2QyxNQUFNLElBQUlDLEtBQUssQ0FBQ0QsR0FBRyxDQUFDO0FBQ3RCLENBQUM7QUFFRE4sT0FBTyxDQUFDUSxXQUFXLEdBQUcsZUFBZUEsV0FBVyxDQUFFQyxRQUFRLEVBQUU7RUFDMUQsSUFBSTtJQUNGLE1BQU1DLFdBQUUsQ0FBQ0MsTUFBTSxDQUFDRixRQUFRLEVBQUVDLFdBQUUsQ0FBQ0UsSUFBSSxDQUFDO0lBQ2xDLElBQUlDLGVBQU0sQ0FBQ0MsU0FBUyxFQUFFLEVBQUU7TUFLdEIsTUFBTUosV0FBRSxDQUFDSyxLQUFLLENBQUMsTUFBTUwsV0FBRSxDQUFDTSxJQUFJLENBQUNQLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQztJQUNBLE9BQU8sSUFBSTtFQUNiLENBQUMsQ0FBQyxPQUFPUSxHQUFHLEVBQUU7SUFDWixPQUFPLEtBQUs7RUFDZDtBQUNGLENBQUM7QUFFRGpCLE9BQU8sQ0FBQ2tCLE9BQU8sR0FBRyxnQkFBZ0JoQixHQUFHLEVBQUVpQixPQUFPLEVBQUU7RUFDOUMsSUFBSSxFQUFDLE1BQU0sSUFBSSxDQUFDWCxXQUFXLENBQUNXLE9BQU8sQ0FBQyxHQUFFO0lBQ3BDLE1BQU0sSUFBSVosS0FBSyxDQUFFLHVCQUFzQlksT0FBUSxzQkFBcUIsR0FDakUsd0VBQXVFQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ0YsT0FBTyxDQUFFLElBQUcsR0FDaEcsMERBQXlELENBQUM7RUFDL0Q7RUFDQSxNQUFNakIsR0FBRyxDQUFDb0IsSUFBSSxDQUFDSCxPQUFPLENBQUM7QUFDekIsQ0FBQztBQUFDLGVBRWFuQixPQUFPO0FBQUEifQ==