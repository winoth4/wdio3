{"version":3,"file":"general.js","names":["extensions","commands","helpers","getPageSource","uiautomator2","jwproxy","command","getClipboard","adb","getApiLevel","doSendKeys","params","keyevent","keycode","metastate","log","debug","back","getStrings","language","getDeviceLanguage","info","preprocessStringsMap","mapping","result","key","value","_","toPairs","isString","JSON","stringify","apkStrings","opts","app","appPackage","errorAndThrow","tmpRoot","tempDir","openDir","pullApk","err","message","fs","exists","extractStringsFromApk","rimraf","getDisplayDensity","getWindowSize","getWindowRect","width","height","x","y","executeMobile","mobileCommand","mobileCommandsMapping","shell","execEmuConsoleCommand","dragGesture","flingGesture","doubleClickGesture","clickGesture","longClickGesture","pinchCloseGesture","pinchOpenGesture","swipeGesture","scrollGesture","scrollBackTo","scroll","viewportScreenshot","viewportRect","deepLink","startLogsBroadcast","stopLogsBroadcast","acceptAlert","dismissAlert","batteryInfo","deviceInfo","getDeviceTime","changePermissions","getPermissions","performEditorAction","startScreenStreaming","stopScreenStreaming","getNotifications","listSms","type","sensorSet","pushFile","pullFile","pullFolder","deleteFile","isAppInstalled","queryAppState","activateApp","removeApp","terminateApp","installApp","clearApp","startActivity","startService","stopService","broadcast","getContexts","installMultipleApks","unlock","refreshGpsCache","startMediaProjectionRecording","isMediaProjectionRecordingRunning","stopMediaProjectionRecording","has","errors","UnknownCommandError","keys","mobileViewportScreenshot","getViewportScreenshot","mobileViewPortRect","getViewPortRect","setUrl","url","startUri","mobileDeepLink","package","pkg","waitForLaunch","openNotifications","updateSettings","settings","update","getSettings","driverSettings","serverSettings","wrapBootstrapDisconnect","wrapped","suspendChromedriverProxy","chromedriver","proxyReqRes","bind","proxyCommand","jwpProxyActive","mobileGetDeviceInfo","mobileType","text","isUndefined","typeUnicode","mobileInstallMultipleApks","isArray","apks","isEmpty","InvalidArgumentError","B","all","map","configureApp","APK_EXTENSION","options","Object","assign"],"sources":["../../../lib/commands/general.js"],"sourcesContent":["import _ from 'lodash';\nimport B from 'bluebird';\nimport { errors } from 'appium/driver';\nimport { fs, tempDir } from 'appium/support';\nimport { APK_EXTENSION } from '../extensions';\n\nlet extensions = {},\n    commands = {},\n    helpers = {};\n\ncommands.getPageSource = async function () {\n  return await this.uiautomator2.jwproxy.command('/source', 'GET', {});\n};\n\ncommands.getClipboard = async function () {\n  return (await this.adb.getApiLevel() < 29)\n    ? (await this.uiautomator2.jwproxy.command('/appium/device/get_clipboard', 'POST', {}))\n    : (await this.adb.getClipboard());\n};\n\n// Need to override this for correct unicode support\ncommands.doSendKeys = async function (params) {\n  await this.uiautomator2.jwproxy.command('/keys', 'POST', params);\n};\n\n// uiautomator2 doesn't support metastate for keyevents\ncommands.keyevent = async function (keycode, metastate) {\n  this.log.debug(`Ignoring metastate ${metastate}`);\n  await this.adb.keyevent(keycode);\n};\n\n// Use ADB since we don't have UiAutomator\ncommands.back = async function () {\n  await this.adb.keyevent(4);\n};\n\ncommands.getStrings = async function (language) {\n  if (!language) {\n    language = await this.adb.getDeviceLanguage();\n    this.log.info(`No language specified, returning strings for: ${language}`);\n  }\n\n  // Clients require the resulting mapping to have both keys\n  // and values of type string\n  const preprocessStringsMap = function (mapping) {\n    const result = {};\n    for (const [key, value] of _.toPairs(mapping)) {\n      result[key] = _.isString(value) ? value : JSON.stringify(value);\n    }\n    return result;\n  };\n\n  if (this.apkStrings[language]) {\n    // Return cached strings\n    return preprocessStringsMap(this.apkStrings[language]);\n  }\n\n  if (!this.opts.app && !this.opts.appPackage) {\n    this.log.errorAndThrow(\"One of 'app' or 'appPackage' capabilities should must be specified\");\n  }\n\n  let app = this.opts.app;\n  const tmpRoot = await tempDir.openDir();\n  try {\n    if (!app) {\n      try {\n        app = await this.adb.pullApk(this.opts.appPackage, tmpRoot);\n      } catch (err) {\n        this.log.errorAndThrow(`Failed to pull an apk from '${this.opts.appPackage}'. Original error: ${err.message}`);\n      }\n    }\n\n    if (!await fs.exists(app)) {\n      this.log.errorAndThrow(`The app at '${app}' does not exist`);\n    }\n\n    try {\n      const {apkStrings} = await this.adb.extractStringsFromApk(app, language, tmpRoot);\n      this.apkStrings[language] = apkStrings;\n      return preprocessStringsMap(apkStrings);\n    } catch (err) {\n      this.log.errorAndThrow(`Cannot extract strings from '${app}'. Original error: ${err.message}`);\n    }\n  } finally {\n    await fs.rimraf(tmpRoot);\n  }\n};\n\ncommands.getDisplayDensity = async function getDisplayDensity () {\n  return await this.uiautomator2.jwproxy.command('/appium/device/display_density', 'GET', {});\n};\n\n// memoized in constructor\ncommands.getWindowSize = async function () {\n  return await this.uiautomator2.jwproxy.command('/window/current/size', 'GET', {});\n};\n\n// For W3C\ncommands.getWindowRect = async function () {\n  const {width, height} = await this.getWindowSize();\n  return {\n    width,\n    height,\n    x: 0,\n    y: 0,\n  };\n};\n\nextensions.executeMobile = async function (mobileCommand, opts = {}) {\n  const mobileCommandsMapping = {\n    shell: 'mobileShell',\n\n    execEmuConsoleCommand: 'mobileExecEmuConsoleCommand',\n\n    dragGesture: 'mobileDragGesture',\n    flingGesture: 'mobileFlingGesture',\n    doubleClickGesture: 'mobileDoubleClickGesture',\n    clickGesture: 'mobileClickGesture',\n    longClickGesture: 'mobileLongClickGesture',\n    pinchCloseGesture: 'mobilePinchCloseGesture',\n    pinchOpenGesture: 'mobilePinchOpenGesture',\n    swipeGesture: 'mobileSwipeGesture',\n    scrollGesture: 'mobileScrollGesture',\n    scrollBackTo: 'mobileScrollBackTo',\n    scroll: 'mobileScroll',\n    viewportScreenshot: 'mobileViewportScreenshot',\n    viewportRect: 'mobileViewPortRect',\n\n    deepLink: 'mobileDeepLink',\n\n    startLogsBroadcast: 'mobileStartLogsBroadcast',\n    stopLogsBroadcast: 'mobileStopLogsBroadcast',\n\n    acceptAlert: 'mobileAcceptAlert',\n    dismissAlert: 'mobileDismissAlert',\n\n    batteryInfo: 'mobileGetBatteryInfo',\n\n    deviceInfo: 'mobileGetDeviceInfo',\n\n    getDeviceTime: 'mobileGetDeviceTime',\n\n    changePermissions: 'mobileChangePermissions',\n    getPermissions: 'mobileGetPermissions',\n\n    performEditorAction: 'mobilePerformEditorAction',\n\n    startScreenStreaming: 'mobileStartScreenStreaming',\n    stopScreenStreaming: 'mobileStopScreenStreaming',\n\n    getNotifications: 'mobileGetNotifications',\n\n    listSms: 'mobileListSms',\n\n    type: 'mobileType',\n    sensorSet: 'sensorSet',\n\n    pushFile: 'mobilePushFile',\n    pullFile: 'mobilePullFile',\n    pullFolder: 'mobilePullFolder',\n    deleteFile: 'mobileDeleteFile',\n\n    isAppInstalled: 'mobileIsAppInstalled',\n    queryAppState: 'mobileQueryAppState',\n    activateApp: 'mobileActivateApp',\n    removeApp: 'mobileRemoveApp',\n    terminateApp: 'mobileTerminateApp',\n    installApp: 'mobileInstallApp',\n    clearApp: 'mobileClearApp',\n\n    startActivity: 'mobileStartActivity',\n    startService: 'mobileStartService',\n    stopService: 'mobileStopService',\n    broadcast: 'mobileBroadcast',\n\n    getContexts: 'mobileGetContexts',\n\n    installMultipleApks: 'mobileInstallMultipleApks',\n\n    unlock: 'mobileUnlock',\n\n    refreshGpsCache: 'mobileRefreshGpsCache',\n\n    startMediaProjectionRecording: 'mobileStartMediaProjectionRecording',\n    isMediaProjectionRecordingRunning: 'mobileIsMediaProjectionRecordingRunning',\n    stopMediaProjectionRecording: 'mobileStopMediaProjectionRecording',\n  };\n\n  if (!_.has(mobileCommandsMapping, mobileCommand)) {\n    throw new errors.UnknownCommandError(`Unknown mobile command \"${mobileCommand}\". ` +\n      `Only ${_.keys(mobileCommandsMapping)} commands are supported.`);\n  }\n  return await this[mobileCommandsMapping[mobileCommand]](opts);\n};\n\ncommands.mobileViewportScreenshot = async function () {\n  return await this.getViewportScreenshot();\n};\n\n/**\n * @typedef {object} Rectangle\n * @property {number} left - The left coordinate of the Rectangle.\n * @property {number} top - The top coordinate of the Rectangle.\n * @property {number} width - The width of Rectangle.\n * @property {number} height - The height of Rectangle.\n */\n\n/**\n * Returns the viewport coordinates.\n * @returns {Rectangle} The viewport coordinates.\n */\ncommands.mobileViewPortRect = async function mobileViewPortRect () {\n  return await this.getViewPortRect();\n};\n\ncommands.setUrl = async function (url) {\n  await this.adb.startUri(url, this.opts.appPackage);\n};\n\n/**\n * @typedef {object} DeepLinkOpts\n * @property {!string} url - The name of URL to start.\n * @property {!string} package - The name of the package to start the URI with.\n * @property {?boolean} waitForLaunch [true] - if `false` then adb won't wait\n * for the started activity to return the control\n */\n\n/**\n * Start URL that take users directly to specific content in the app\n * @param {DeepLinkOpts} opts\n */\ncommands.mobileDeepLink = async function (opts = {}) {\n  const {\n    url,\n    package: pkg,\n    waitForLaunch,\n  } = opts;\n  return await this.adb.startUri(url, pkg, { waitForLaunch });\n};\n\ncommands.openNotifications = async function () {\n  return await this.uiautomator2.jwproxy.command('/appium/device/open_notifications', 'POST', {});\n};\n\ncommands.updateSettings = async function (settings) {\n  await this.settings.update(settings);\n  await this.uiautomator2.jwproxy.command('/appium/settings', 'POST', {settings});\n};\n\ncommands.getSettings = async function () {\n  const driverSettings = this.settings.getSettings();\n  const serverSettings = await this.uiautomator2.jwproxy.command('/appium/settings', 'GET');\n  return {...driverSettings, ...serverSettings};\n};\n\n/**\n * Overriding appium-android-driver's wrapBootstrapDisconnect,\n * unlike in appium-android-driver avoiding adb restarting as it intern\n * kills UiAutomator2 server running in the device.\n **/\nhelpers.wrapBootstrapDisconnect = async function (wrapped) {\n  await wrapped();\n};\n\n// Stop proxying to any Chromedriver and redirect to uiautomator2\nhelpers.suspendChromedriverProxy = function () {\n  this.chromedriver = null;\n  this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);\n  this.proxyCommand = this.uiautomator2.proxyCommand.bind(this.uiautomator2);\n  this.jwpProxyActive = true;\n};\n\n/**\n * The list of available info entries can be found at\n * https://github.com/appium/appium-uiautomator2-server/blob/master/app/src/main/java/io/appium/uiautomator2/handler/GetDeviceInfo.java\n */\ncommands.mobileGetDeviceInfo = async function () {\n  return await this.uiautomator2.jwproxy.command('/appium/device/info', 'GET');\n};\n\n/**\n * @typedef {Object} TypingOptions\n * @property {!string|number|boolean} text - The text to type\n */\n\n/**\n * Types the given Unicode string.\n * It is expected that the focus is already put\n * to the destination input field before this method is called.\n *\n * @param {TypingOptions} opts\n * @returns {boolean} `true` if the input text has been successfully sent to adb\n * @throws {Error} if `text` property has not been provided\n */\ncommands.mobileType = async function mobileType (opts = {}) {\n  const {\n    text,\n  } = opts;\n  if (_.isUndefined(text)) {\n    this.log.errorAndThrow(`The 'text' argument is mandatory`);\n  }\n  return await this.adb.typeUnicode(text);\n};\n\n\n/**\n * @typedef {Object} InstallOptions\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} replace [true] - Set it to false if you don't want\n *                                      the application to be upgraded/reinstalled\n *                                      if it is already present on the device.\n * @property {boolean} partialInstall [false] - Install apks partially. It is used for 'install-multiple'.\n *                                             https://android.stackexchange.com/questions/111064/what-is-a-partial-application-install-via-adb\n */\n\n/**\n * @typedef {Object} InstallMultipleApksOptions\n * @property {Array<string>} apks - The list of APKs to install. Each APK should be a path to a apk\n *                                  or downloadable URL as HTTP/HTTPS.\n * @property {InstallOptions} options\n */\n\n/**\n * Install multiple APKs with `install-multiple` option.\n *\n * @param {InstallMultipleApksOptions} opts\n * @throws {Error} if an error occured while installing the given APKs.\n */\ncommands.mobileInstallMultipleApks = async function (opts = {}) {\n  if (!_.isArray(opts.apks) || _.isEmpty(opts.apks)) {\n    throw new errors.InvalidArgumentError('No apks are given to install');\n  }\n  const apks = await B.all(opts.apks\n    .map((app) => this.helpers.configureApp(app, [APK_EXTENSION])));\n  await this.adb.installMultipleApks(apks, opts.options);\n};\n\nObject.assign(extensions, commands, helpers);\n\nexport default extensions;\n"],"mappings":"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"}