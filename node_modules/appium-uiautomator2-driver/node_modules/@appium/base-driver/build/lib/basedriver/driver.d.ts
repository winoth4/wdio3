/**
 * @implements {SessionHandler<C>}
 * @template {Constraints} C
 * @template {StringRecord} [CArgs=StringRecord]
 * @extends {DriverCore<C>}
 */
export class BaseDriverCore<C extends Readonly<Record<string, import("@appium/types").Constraint>>, CArgs extends import("@appium/types").StringRecord = import("@appium/types").StringRecord> extends DriverCore<C> implements SessionHandler<C> {
    /**
     *
     * @param {DriverOpts<C>} opts
     * @param {boolean} shouldValidateCaps
     */
    constructor(opts?: DriverOpts<C>, shouldValidateCaps?: boolean);
    /**
     * @type {CArgs & ServerArgs}
     */
    cliArgs: CArgs & ServerArgs;
    /**
     * @type {Capabilities<C>}
     */
    caps: Capabilities<C>;
    /**
     * @type {W3CCapabilities<C>}
     */
    originalCaps: W3CCapabilities<C>;
    /**
     * @type {C}
     */
    desiredCapConstraints: C;
    /**
     * @type {DriverOpts<C> & DriverOpts<BaseDriverCapConstraints>}
     */
    opts: DriverOpts<C> & DriverOpts<BaseDriverCapConstraints>;
    /**
     * Contains the base constraints plus whatever the subclass wants to add.
     *
     * Subclasses _shouldn't_ need to use this. If you need to use this, please create
     * an issue:
     * @see https://github.com/appium/appium/issues/new
     * @type {Readonly<BaseDriverCapConstraints & C>}
     * @protected
     */
    protected get _desiredCapConstraints(): Readonly<typeof BASE_DESIRED_CAP_CONSTRAINTS & C>;
    /**
     * @param {string} cmd
     * @param  {...any} args
     * @returns {Promise<any>}
     */
    executeCommand(cmd: string, ...args: any[]): Promise<any>;
    /**
     *
     * @param {Error|import('../protocol/errors').NoSuchDriverError} err
     */
    startUnexpectedShutdown(err?: Error | import('../protocol/errors').NoSuchDriverError): Promise<void>;
    startNewCommandTimeout(): Promise<void>;
    /**
     *
     * @param {import('@appium/types').AppiumServer} server
     * @param {string} host
     * @param {number} port
     * @param {string} path
     */
    assignServer(server: import('@appium/types').AppiumServer, host: string, port: number, path: string): void;
    server: import("@appium/types").AppiumServer | undefined;
    serverHost: string | undefined;
    serverPort: number | undefined;
    serverPath: string | undefined;
    reset(): Promise<void>;
    resetOnUnexpectedShutdown: (() => void) | undefined;
    /**
     *
     * Historically the first two arguments were reserved for JSONWP capabilities.
     * Appium 2 has dropped the support of these, so now we only accept capability
     * objects in W3C format and thus allow any of the three arguments to represent
     * the latter.
     * @param {W3CCapabilities<C>} w3cCapabilities1
     * @param {W3CCapabilities<C>} [w3cCapabilities2]
     * @param {W3CCapabilities<C>} [w3cCapabilities]
     * @param {DriverData[]} [driverData]
     * @returns {Promise<[string,Capabilities<C>]>}
     */
    createSession(w3cCapabilities1: W3CCapabilities<C>, w3cCapabilities2?: W3CCapabilities<C, void> | undefined, w3cCapabilities?: W3CCapabilities<C, void> | undefined, driverData?: import("@appium/types").DriverData[] | undefined): Promise<[string, Capabilities<C>]>;
    /**
     *
     * @param {string} [sessionId]
     * @param {DriverData[]} [driverData]
     * @returns {Promise<void>}
     */
    deleteSession(sessionId?: string | undefined, driverData?: import("@appium/types").DriverData[] | undefined): Promise<void>;
    /**
     *
     * @param {Capabilities<C>} caps
     */
    logExtraCaps(caps: Capabilities<C>): void;
    /**
     *
     * @param {Capabilities<C>} caps
     * @returns {boolean}
     */
    validateDesiredCaps(caps: Capabilities<C>): boolean;
}
declare const BaseDriver_base: import("./commands/execute").ExecuteBase<any>;
/**
 * This ensures that all of the mixins correctly implement the interface described in {@linkcode Driver}.
 * @template {Constraints} [C={}]
 * @implements {Driver<C>}
 */
export class BaseDriver<C extends Readonly<Record<string, import("@appium/types").Constraint>> = {}> extends BaseDriver_base implements Driver<C> {
    constructor(...arguments_: any[]);
}
export default BaseDriver;
export type HTTPMethod = import('@appium/types').HTTPMethod;
export type DriverData = import('@appium/types').DriverData;
export type Constraints = import('@appium/types').Constraints;
export type Constraint = import('@appium/types').Constraint;
export type StringRecord = import('@appium/types').StringRecord;
export type BaseDriverCapConstraints = import('@appium/types').BaseDriverCapConstraints;
export type ServerArgs = import('@appium/types').ServerArgs;
export type UpdateServerCallback = (app: import('express').Express, httpServer: import('@appium/types').AppiumServer) => import('type-fest').Promisable<void>;
/**
 * This is used to extend {@linkcode BaseDriverCore } by the mixins and also external drivers.
 */
export type BaseDriverBase<C extends Readonly<Record<string, import("@appium/types").Constraint>>, Proto = {}, Static = {}> = import('@appium/types').Class<BaseDriverCore<C> & Proto, import("@appium/types").DriverStatic<any> & Static>;
export type SessionHandler<C extends Readonly<Record<string, import("@appium/types").Constraint>> = typeof BASE_DESIRED_CAP_CONSTRAINTS> = import('@appium/types').SessionHandler<[string, object], void, C>;
export type Capabilities<C extends Readonly<Record<string, import("@appium/types").Constraint>> = typeof BASE_DESIRED_CAP_CONSTRAINTS, Extra extends void | import("@appium/types").StringRecord = void> = import('@appium/types').Capabilities<C, Extra>;
export type W3CCapabilities<C extends Readonly<Record<string, import("@appium/types").Constraint>> = typeof BASE_DESIRED_CAP_CONSTRAINTS, Extra extends void | import("@appium/types").StringRecord = void> = import('@appium/types').W3CCapabilities<C, Extra>;
export type Driver<C extends Readonly<Record<string, import("@appium/types").Constraint>> = typeof BASE_DESIRED_CAP_CONSTRAINTS, CArgs extends import("@appium/types").StringRecord = import("@appium/types").StringRecord> = import('@appium/types').Driver<C, CArgs>;
export type ExternalDriver<C extends Readonly<Record<string, import("@appium/types").Constraint>>> = import('@appium/types').ExternalDriver<C>;
export type DriverOpts<C extends Readonly<Record<string, import("@appium/types").Constraint>>> = import('@appium/types').DriverOpts<C>;
import { DriverCore } from "./core";
import { BASE_DESIRED_CAP_CONSTRAINTS } from "@appium/types";
//# sourceMappingURL=driver.d.ts.map