"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _teen_process = require("teen_process");
var _logger = _interopRequireDefault(require("../logger.js"));
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _lruCache = _interopRequireDefault(require("lru-cache"));
var _helpers = require("../helpers.js");
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _bluebird = _interopRequireDefault(require("bluebird"));
const BASE_APK = 'base-master.apk';
const LANGUAGE_APK = lang => `base-${lang}.apk`;
const APKS_CACHE = new _lruCache.default({
  max: 10,
  dispose: (apksHash, extractedFilesRoot) => _support.fs.rimraf(extractedFilesRoot)
});
const APKS_CACHE_GUARD = new _asyncLock.default();
const BUNDLETOOL_TIMEOUT_MS = 4 * 60 * 1000;
const apksUtilsMethods = {};
process.on('exit', () => {
  if (!APKS_CACHE.size) {
    return;
  }
  const paths = [...APKS_CACHE.values()];
  _logger.default.debug(`Performing cleanup of ${paths.length} cached .apks ` + _support.util.pluralize('package', paths.length));
  for (const appPath of paths) {
    try {
      _support.fs.rimrafSync(appPath);
    } catch (e) {
      _logger.default.warn(e.message);
    }
  }
});
async function extractFromApks(apks, dstPath) {
  if (!_lodash.default.isArray(dstPath)) {
    dstPath = [dstPath];
  }
  return await APKS_CACHE_GUARD.acquire(apks, async () => {
    const apksHash = await _support.fs.hash(apks);
    _logger.default.debug(`Calculated '${apks}' hash: ${apksHash}`);
    if (APKS_CACHE.has(apksHash)) {
      const resultPath = _path.default.resolve(APKS_CACHE.get(apksHash), ...dstPath);
      if (await _support.fs.exists(resultPath)) {
        return resultPath;
      }
      APKS_CACHE.del(apksHash);
    }
    const tmpRoot = await _support.tempDir.openDir();
    _logger.default.debug(`Unpacking application bundle at '${apks}' to '${tmpRoot}'`);
    await (0, _helpers.unzipFile)(apks, tmpRoot);
    const resultPath = _path.default.resolve(tmpRoot, ...dstPath);
    if (!(await _support.fs.exists(resultPath))) {
      throw new Error(`${dstPath.join(_path.default.sep)} cannot be found in '${apks}' bundle. ` + `Does the archive contain a valid application bundle?`);
    }
    APKS_CACHE.set(apksHash, tmpRoot);
    return resultPath;
  });
}
apksUtilsMethods.execBundletool = async function execBundletool(args, errorMsg) {
  await this.initBundletool();
  args = ['-jar', this.binaries.bundletool, ...args];
  const env = process.env;
  if (this.adbPort) {
    env.ANDROID_ADB_SERVER_PORT = `${this.adbPort}`;
  }
  if (this.adbHost) {
    env.ANDROID_ADB_SERVER_HOST = this.adbHost;
  }
  _logger.default.debug(`Executing bundletool with arguments: ${JSON.stringify(args)}`);
  let stdout;
  try {
    ({
      stdout
    } = await (0, _teen_process.exec)(await (0, _helpers.getJavaForOs)(), args, {
      env,
      timeout: BUNDLETOOL_TIMEOUT_MS
    }));
    _logger.default.debug(`Command stdout: ${_lodash.default.truncate(stdout, {
      length: 300
    })}`);
    return stdout;
  } catch (e) {
    if (e.stdout) {
      _logger.default.debug(`Command stdout: ${e.stdout}`);
    }
    if (e.stderr) {
      _logger.default.debug(`Command stderr: ${e.stderr}`);
    }
    throw new Error(`${errorMsg}. Original error: ${e.message}`);
  }
};
apksUtilsMethods.getDeviceSpec = async function getDeviceSpec(specLocation) {
  const args = ['get-device-spec', '--adb', this.executable.path, '--device-id', this.curDeviceId, '--output', specLocation];
  _logger.default.debug(`Getting the spec for the device '${this.curDeviceId}'`);
  await this.execBundletool(args, 'Cannot retrieve the device spec');
  return specLocation;
};
apksUtilsMethods.installMultipleApks = async function installMultipleApks(apkPathsToInstall, options = {}) {
  const installArgs = (0, _helpers.buildInstallArgs)(await this.getApiLevel(), options);
  return await this.adbExec(['install-multiple', ...installArgs, ...apkPathsToInstall], {
    timeout: options.timeout,
    timeoutCapName: options.timeoutCapName
  });
};
apksUtilsMethods.installApks = async function installApks(apks, options = {}) {
  const {
    grantPermissions,
    allowTestPackages,
    timeout
  } = options;
  const args = ['install-apks', '--adb', this.executable.path, '--apks', apks, '--timeout-millis', timeout || _helpers.APKS_INSTALL_TIMEOUT, '--device-id', this.curDeviceId];
  if (allowTestPackages) {
    args.push('--allow-test-only');
  }
  const tasks = [this.execBundletool(args, `Cannot install '${_path.default.basename(apks)}' to the device ${this.curDeviceId}`)];
  if (grantPermissions) {
    tasks.push(this.getApkInfo(apks));
  }
  const [, apkInfo] = await _bluebird.default.all(tasks);
  if (grantPermissions && apkInfo) {
    await this.grantAllPermissions(apkInfo.name);
  }
};
apksUtilsMethods.extractBaseApk = async function extractBaseApk(apks) {
  return await extractFromApks(apks, ['splits', BASE_APK]);
};
apksUtilsMethods.extractLanguageApk = async function extractLanguageApk(apks, language = null) {
  if (language) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(language)]);
    } catch (e) {
      _logger.default.debug(e.message);
      _logger.default.info(`Assuming that splitting by language is not enabled for the '${apks}' bundle ` + `and returning the main apk instead`);
      return await this.extractBaseApk(apks);
    }
  }
  const defaultLanguages = ['en', 'en_us'];
  for (const lang of defaultLanguages) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(lang)]);
    } catch (ign) {}
  }
  _logger.default.info(`Cannot find any split apk for the default languages ${JSON.stringify(defaultLanguages)}. ` + `Returning the main apk instead.`);
  return await this.extractBaseApk(apks);
};
apksUtilsMethods.isTestPackageOnlyError = function isTestPackageOnlyError(output) {
  return /\[INSTALL_FAILED_TEST_ONLY\]/.test(output);
};
var _default = apksUtilsMethods;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,