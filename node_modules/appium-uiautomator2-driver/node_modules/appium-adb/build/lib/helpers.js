"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ADB_EXEC_TIMEOUT = exports.APK_INSTALL_TIMEOUT = exports.APK_EXTENSION = exports.APKS_INSTALL_TIMEOUT = exports.APKS_EXTENSION = void 0;
exports.buildInstallArgs = buildInstallArgs;
exports.buildStartCmd = buildStartCmd;
exports.dirExists = dirExists;
exports.escapeShellArg = escapeShellArg;
exports.extractMatchingPermissions = void 0;
exports.formatConfigMarker = formatConfigMarker;
exports.getAndroidPlatformAndPath = getAndroidPlatformAndPath;
exports.getAndroidPrefsRoot = getAndroidPrefsRoot;
exports.getApkanalyzerForOs = getApkanalyzerForOs;
exports.getApksignerForOs = getApksignerForOs;
exports.getBuildToolsDirs = void 0;
exports.getIMEListFromOutput = getIMEListFromOutput;
exports.getOpenSslForOs = exports.getModuleRoot = exports.getJavaHome = exports.getJavaForOs = void 0;
exports.getSdkRootFromEnv = getSdkRootFromEnv;
exports.getSdkToolsVersion = void 0;
exports.getSurfaceOrientation = getSurfaceOrientation;
exports.isCurrentFocusOnKeyguard = isCurrentFocusOnKeyguard;
exports.isScreenOnFully = isScreenOnFully;
exports.isShowingLockscreen = isShowingLockscreen;
exports.matchComponentName = matchComponentName;
exports.parseAapt2Strings = parseAapt2Strings;
exports.parseAaptStrings = parseAaptStrings;
exports.parseJsonData = parseJsonData;
exports.parseLaunchableActivityNames = parseLaunchableActivityNames;
exports.parseManifest = parseManifest;
exports.requireSdkRoot = requireSdkRoot;
exports.toAvdLocaleArgs = toAvdLocaleArgs;
exports.unsignApk = unsignApk;
exports.unzipFile = unzipFile;
require("source-map-support/register");
var _path = _interopRequireDefault(require("path"));
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("./logger.js"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _semver = _interopRequireDefault(require("semver"));
var _os = _interopRequireDefault(require("os"));
const APKS_EXTENSION = '.apks';
exports.APKS_EXTENSION = APKS_EXTENSION;
const APK_EXTENSION = '.apk';
exports.APK_EXTENSION = APK_EXTENSION;
const APK_INSTALL_TIMEOUT = 60000;
exports.APK_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT;
const APKS_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT * 2;
exports.APKS_INSTALL_TIMEOUT = APKS_INSTALL_TIMEOUT;
const DEFAULT_ADB_EXEC_TIMEOUT = 20000;
exports.DEFAULT_ADB_EXEC_TIMEOUT = DEFAULT_ADB_EXEC_TIMEOUT;
const MAIN_ACTION = 'android.intent.action.MAIN';
const LAUNCHER_CATEGORY = 'android.intent.category.LAUNCHER';
const MODULE_NAME = 'appium-adb';
const getModuleRoot = _lodash.default.memoize(function getModuleRoot() {
  const root = _support.node.getModuleRootSync(MODULE_NAME, __filename);
  if (!root) {
    throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
  }
  return root;
});
exports.getModuleRoot = getModuleRoot;
function getSdkRootFromEnv() {
  return process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT;
}
async function requireSdkRoot(customRoot = null) {
  const sdkRoot = customRoot || getSdkRootFromEnv();
  const docMsg = 'Read https://developer.android.com/studio/command-line/variables for more details';
  if (_lodash.default.isEmpty(sdkRoot)) {
    throw new Error(`Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. ${docMsg}`);
  }
  if (!(await _support.fs.exists(sdkRoot))) {
    throw new Error(`The Android SDK root folder '${sdkRoot}' does not exist on the local file system. ${docMsg}`);
  }
  const stats = await _support.fs.stat(sdkRoot);
  if (!stats.isDirectory()) {
    throw new Error(`The Android SDK root '${sdkRoot}' must be a folder. ${docMsg}`);
  }
  return sdkRoot;
}
async function getAndroidPlatformAndPath(sdkRoot) {
  const propsPaths = await _support.fs.glob('*/build.prop', {
    cwd: _path.default.resolve(sdkRoot, 'platforms'),
    absolute: true
  });
  const platformsMapping = {};
  for (const propsPath of propsPaths) {
    const propsContent = await _support.fs.readFile(propsPath, 'utf-8');
    const platformPath = _path.default.dirname(propsPath);
    const platform = _path.default.basename(platformPath);
    const match = /ro\.build\.version\.sdk=(\d+)/.exec(propsContent);
    if (!match) {
      _logger.default.warn(`Cannot read the SDK version from '${propsPath}'. Skipping '${platform}'`);
      continue;
    }
    platformsMapping[parseInt(match[1], 10)] = {
      platform,
      platformPath
    };
  }
  if (_lodash.default.isEmpty(platformsMapping)) {
    _logger.default.warn(`Found zero platform folders at '${_path.default.resolve(sdkRoot, 'platforms')}'. ` + `Do you have any Android SDKs installed?`);
    return {
      platform: null,
      platformPath: null
    };
  }
  const recentSdkVersion = _lodash.default.keys(platformsMapping).sort().reverse()[0];
  const result = platformsMapping[recentSdkVersion];
  _logger.default.debug(`Found the most recent Android platform: ${JSON.stringify(result)}`);
  return result;
}
async function unzipFile(zipPath, dstRoot = _path.default.dirname(zipPath)) {
  _logger.default.debug(`Unzipping '${zipPath}' to '${dstRoot}'`);
  await _support.zip.assertValidZip(zipPath);
  await _support.zip.extractAllTo(zipPath, dstRoot);
  _logger.default.debug('Unzip successful');
}
async function unsignApk(apkPath) {
  const tmpRoot = await _support.tempDir.openDir();
  const metaInfFolderName = 'META-INF';
  try {
    let hasMetaInf = false;
    await _support.zip.readEntries(apkPath, ({
      entry
    }) => {
      hasMetaInf = entry.fileName.startsWith(`${metaInfFolderName}/`);
      return !hasMetaInf;
    });
    if (!hasMetaInf) {
      return false;
    }
    const tmpZipRoot = _path.default.resolve(tmpRoot, 'apk');
    await _support.zip.extractAllTo(apkPath, tmpZipRoot);
    await _support.fs.rimraf(_path.default.resolve(tmpZipRoot, metaInfFolderName));
    const tmpResultPath = _path.default.resolve(tmpRoot, _path.default.basename(apkPath));
    await _support.zip.toArchive(tmpResultPath, {
      cwd: tmpZipRoot
    });
    await _support.fs.unlink(apkPath);
    await _support.fs.mv(tmpResultPath, apkPath);
    return true;
  } finally {
    await _support.fs.rimraf(tmpRoot);
  }
}
function getIMEListFromOutput(stdout) {
  let engines = [];
  for (let line of stdout.split('\n')) {
    if (line.length > 0 && line[0] !== ' ') {
      engines.push(line.trim().replace(/:$/, ''));
    }
  }
  return engines;
}
const getJavaHome = _lodash.default.memoize(async function getJavaHome() {
  const result = process.env.JAVA_HOME;
  if (!result) {
    throw new Error('The JAVA_HOME environment variable is not set for the current process');
  }
  if (!(await _support.fs.exists(result))) {
    throw new Error(`The JAVA_HOME location '${result}' must exist`);
  }
  const stats = await _support.fs.stat(result);
  if (!stats.isDirectory()) {
    throw new Error(`The JAVA_HOME location '${result}' must be a valid folder`);
  }
  return result;
});
exports.getJavaHome = getJavaHome;
const getJavaForOs = _lodash.default.memoize(async function getJavaForOs() {
  let javaHome;
  let errMsg;
  try {
    javaHome = await getJavaHome();
  } catch (err) {
    errMsg = err.message;
  }
  const executableName = `java${_support.system.isWindows() ? '.exe' : ''}`;
  if (javaHome) {
    const resultPath = _path.default.resolve(javaHome, 'bin', executableName);
    if (await _support.fs.exists(resultPath)) {
      return resultPath;
    }
  }
  try {
    return await _support.fs.which(executableName);
  } catch (ign) {}
  throw new Error(`The '${executableName}' binary could not be found ` + `neither in PATH nor under JAVA_HOME (${errMsg || _path.default.resolve(javaHome, 'bin')})`);
});
exports.getJavaForOs = getJavaForOs;
const getOpenSslForOs = async function () {
  const binaryName = `openssl${_support.system.isWindows() ? '.exe' : ''}`;
  try {
    return await _support.fs.which(binaryName);
  } catch (err) {
    throw new Error('The openssl tool must be installed on the system and available on the path');
  }
};
exports.getOpenSslForOs = getOpenSslForOs;
async function getApksignerForOs(sysHelpers) {
  return await sysHelpers.getBinaryFromSdkRoot('apksigner.jar');
}
async function getApkanalyzerForOs(sysHelpers) {
  return await sysHelpers.getBinaryFromSdkRoot('apkanalyzer');
}
function isShowingLockscreen(dumpsys) {
  return _lodash.default.some(['mShowingLockscreen=true', 'mDreamingLockscreen=true'], x => dumpsys.includes(x)) || _lodash.default.every([/KeyguardStateMonitor[\n\s]+mIsShowing=true/, /\s+mInputRestricted=true/], x => x.test(dumpsys));
}
function isCurrentFocusOnKeyguard(dumpsys) {
  let m = /mCurrentFocus.+Keyguard/gi.exec(dumpsys);
  return m && m.length && m[0] ? true : false;
}
function getSurfaceOrientation(dumpsys) {
  let m = /SurfaceOrientation: \d/gi.exec(dumpsys);
  return m && parseInt(m[0].split(':')[1], 10);
}
function isScreenOnFully(dumpsys) {
  let m = /mScreenOnFully=\w+/gi.exec(dumpsys);
  return !m || m && m.length > 0 && m[0].split('=')[1] === 'true' || false;
}
function buildStartCmd(startAppOptions, apiLevel) {
  const {
    user,
    waitForLaunch,
    pkg,
    activity,
    action,
    category,
    stopApp,
    flags
  } = startAppOptions;
  const cmd = ['am', 'start'];
  if (_support.util.hasValue(user)) {
    cmd.push('--user', user);
  }
  if (waitForLaunch) {
    cmd.push('-W');
  }
  if (activity && pkg) {
    cmd.push('-n', `${pkg}/${activity}`);
  }
  if (stopApp && apiLevel >= 15) {
    cmd.push('-S');
  }
  if (action) {
    cmd.push('-a', action);
  }
  if (category) {
    cmd.push('-c', category);
  }
  if (flags) {
    cmd.push('-f', flags);
  }
  if (startAppOptions.optionalIntentArguments) {
    let parseKeyValue = function (str) {
      str = str.trim();
      let space = str.indexOf(' ');
      if (space === -1) {
        return str.length ? [str] : [];
      } else {
        return [str.substring(0, space).trim(), str.substring(space + 1).trim()];
      }
    };
    let optionalIntentArguments = ` ${startAppOptions.optionalIntentArguments}`;
    let re = / (-[^\s]+) (.+)/;
    while (true) {
      let args = re.exec(optionalIntentArguments);
      if (!args) {
        if (optionalIntentArguments.length) {
          cmd.push.apply(cmd, parseKeyValue(optionalIntentArguments));
        }
        break;
      }
      let flag = args[1];
      let flagPos = optionalIntentArguments.indexOf(flag);
      if (flagPos !== 0) {
        let prevArgs = optionalIntentArguments.substring(0, flagPos);
        cmd.push.apply(cmd, parseKeyValue(prevArgs));
      }
      cmd.push(flag);
      optionalIntentArguments = args[2];
    }
  }
  return cmd;
}
const getSdkToolsVersion = _lodash.default.memoize(async function getSdkToolsVersion() {
  const androidHome = process.env.ANDROID_HOME;
  if (!androidHome) {
    throw new Error('ANDROID_HOME environment variable is expected to be set');
  }
  const propertiesPath = _path.default.resolve(androidHome, 'tools', 'source.properties');
  if (!(await _support.fs.exists(propertiesPath))) {
    _logger.default.warn(`Cannot find ${propertiesPath} file to read SDK version from`);
    return;
  }
  const propertiesContent = await _support.fs.readFile(propertiesPath, 'utf8');
  const versionMatcher = new RegExp(/Pkg\.Revision=(\d+)\.?(\d+)?\.?(\d+)?/);
  const match = versionMatcher.exec(propertiesContent);
  if (match) {
    return {
      major: parseInt(match[1], 10),
      minor: match[2] ? parseInt(match[2], 10) : 0,
      build: match[3] ? parseInt(match[3], 10) : 0
    };
  }
  _logger.default.warn(`Cannot parse "Pkg.Revision" value from ${propertiesPath}`);
});
exports.getSdkToolsVersion = getSdkToolsVersion;
const getBuildToolsDirs = _lodash.default.memoize(async function getBuildToolsDirs(sdkRoot) {
  let buildToolsDirs = await _support.fs.glob('*/', {
    cwd: _path.default.resolve(sdkRoot, 'build-tools'),
    absolute: true
  });
  try {
    buildToolsDirs = buildToolsDirs.map(dir => [_path.default.basename(dir), dir]).sort((a, b) => _semver.default.rcompare(a[0], b[0])).map(pair => pair[1]);
  } catch (err) {
    _logger.default.warn(`Cannot sort build-tools folders ${JSON.stringify(buildToolsDirs.map(dir => _path.default.basename(dir)))} ` + `by semantic version names.`);
    _logger.default.warn(`Falling back to sorting by modification date. Original error: ${err.message}`);
    const pairs = await _bluebird.default.map(buildToolsDirs, async dir => [(await _support.fs.stat(dir)).mtime.valueOf(), dir]);
    buildToolsDirs = pairs.sort((a, b) => a[0] < b[0]).map(pair => pair[1]);
  }
  _logger.default.info(`Found ${buildToolsDirs.length} 'build-tools' folders under '${sdkRoot}' (newest first):`);
  for (let dir of buildToolsDirs) {
    _logger.default.info(`    ${dir}`);
  }
  return buildToolsDirs;
});
exports.getBuildToolsDirs = getBuildToolsDirs;
const extractMatchingPermissions = function (dumpsysOutput, groupNames, grantedState = null) {
  const groupPatternByName = groupName => new RegExp(`^(\\s*${_lodash.default.escapeRegExp(groupName)} permissions:[\\s\\S]+)`, 'm');
  const indentPattern = /\S|$/;
  const permissionNamePattern = /android\.\w*\.?permission\.\w+/;
  const grantedStatePattern = /\bgranted=(\w+)/;
  const result = [];
  for (const groupName of groupNames) {
    const groupMatch = groupPatternByName(groupName).exec(dumpsysOutput);
    if (!groupMatch) {
      continue;
    }
    const lines = groupMatch[1].split('\n');
    if (lines.length < 2) {
      continue;
    }
    const titleIndent = lines[0].search(indentPattern);
    for (const line of lines.slice(1)) {
      const currentIndent = line.search(indentPattern);
      if (currentIndent <= titleIndent) {
        break;
      }
      const permissionNameMatch = permissionNamePattern.exec(line);
      if (!permissionNameMatch) {
        continue;
      }
      const item = {
        permission: permissionNameMatch[0]
      };
      const grantedStateMatch = grantedStatePattern.exec(line);
      if (grantedStateMatch) {
        item.granted = grantedStateMatch[1] === 'true';
      }
      result.push(item);
    }
  }
  const filteredResult = result.filter(item => !_lodash.default.isBoolean(grantedState) || item.granted === grantedState).map(item => item.permission);
  _logger.default.debug(`Retrieved ${_support.util.pluralize('permission', filteredResult.length, true)} ` + `from ${groupNames} ${_support.util.pluralize('group', groupNames.length, false)}`);
  return filteredResult;
};
exports.extractMatchingPermissions = extractMatchingPermissions;
function buildInstallArgs(apiLevel, options = {}) {
  const result = [];
  if (!_support.util.hasValue(options.replace) || options.replace) {
    result.push('-r');
  }
  if (options.allowTestPackages) {
    result.push('-t');
  }
  if (options.useSdcard) {
    result.push('-s');
  }
  if (options.grantPermissions) {
    if (apiLevel < 23) {
      _logger.default.debug(`Skipping permissions grant option, since ` + `the current API level ${apiLevel} does not support applications ` + `permissions customization`);
    } else {
      result.push('-g');
    }
  }
  if (options.partialInstall) {
    result.push('-p');
  }
  return result;
}
function parseManifest(manifest) {
  const result = {
    pkg: manifest.package,
    versionCode: parseInt(manifest.versionCode, 10),
    versionName: manifest.versionName || null
  };
  if (!manifest.application) {
    return result;
  }
  for (const activity of [...manifest.application.activities, ...manifest.application.activityAliases]) {
    if (activity.enabled === false || _lodash.default.isEmpty(activity.intentFilters)) {
      continue;
    }
    for (const {
      actions,
      categories
    } of activity.intentFilters) {
      if (_lodash.default.isEmpty(actions) || _lodash.default.isEmpty(categories)) {
        continue;
      }
      const isMainAction = actions.some(({
        name
      }) => name === MAIN_ACTION);
      const isLauncherCategory = categories.some(({
        name
      }) => name === LAUNCHER_CATEGORY);
      if (isMainAction && isLauncherCategory) {
        result.activity = activity.name;
        return result;
      }
    }
  }
  return result;
}
function parseAaptStrings(rawOutput, configMarker) {
  const normalizeStringMatch = function (s) {
    return s.replace(/"$/, '').replace(/^"/, '').replace(/\\"/g, '"');
  };
  const apkStrings = {};
  let isInConfig = false;
  let currentResourceId = null;
  let isInPluralGroup = false;
  const quotedStringPattern = /"[^"\\]*(?:\\.[^"\\]*)*"/;
  for (const line of rawOutput.split(_os.default.EOL)) {
    const trimmedLine = line.trim();
    if (_lodash.default.isEmpty(trimmedLine)) {
      continue;
    }
    if (['config', 'type', 'spec', 'Package'].some(x => trimmedLine.startsWith(x))) {
      isInConfig = trimmedLine.startsWith(`config ${configMarker}:`);
      currentResourceId = null;
      isInPluralGroup = false;
      continue;
    }
    if (!isInConfig) {
      continue;
    }
    if (trimmedLine.startsWith('resource')) {
      isInPluralGroup = false;
      currentResourceId = null;
      if (trimmedLine.includes(':string/')) {
        const match = /:string\/(\S+):/.exec(trimmedLine);
        if (match) {
          currentResourceId = match[1];
        }
      } else if (trimmedLine.includes(':plurals/')) {
        const match = /:plurals\/(\S+):/.exec(trimmedLine);
        if (match) {
          currentResourceId = match[1];
          isInPluralGroup = true;
        }
      }
      continue;
    }
    if (currentResourceId && trimmedLine.startsWith('(string')) {
      const match = quotedStringPattern.exec(trimmedLine);
      if (match) {
        apkStrings[currentResourceId] = normalizeStringMatch(match[0]);
      }
      currentResourceId = null;
      continue;
    }
    if (currentResourceId && isInPluralGroup && trimmedLine.includes(': (string')) {
      const match = quotedStringPattern.exec(trimmedLine);
      if (match) {
        apkStrings[currentResourceId] = [...(apkStrings[currentResourceId] || []), normalizeStringMatch(match[0])];
      }
      continue;
    }
  }
  return apkStrings;
}
function parseAapt2Strings(rawOutput, configMarker) {
  const allLines = rawOutput.split(_os.default.EOL);
  function extractContent(startIdx) {
    let idx = startIdx;
    const startCharPos = allLines[startIdx].indexOf('"');
    if (startCharPos < 0) {
      return [null, idx];
    }
    let result = '';
    while (idx < allLines.length) {
      const terminationCharMatch = /"$/.exec(allLines[idx]);
      if (terminationCharMatch) {
        const terminationCharPos = terminationCharMatch.index;
        if (startIdx === idx) {
          return [allLines[idx].substring(startCharPos + 1, terminationCharPos), idx];
        }
        return [`${result}\\n${_lodash.default.trimStart(allLines[idx].substring(0, terminationCharPos))}`, idx];
      }
      if (idx > startIdx) {
        result += `\\n${_lodash.default.trimStart(allLines[idx])}`;
      } else {
        result += allLines[idx].substring(startCharPos + 1);
      }
      ++idx;
    }
    return [result, idx];
  }
  const apkStrings = {};
  let currentResourceId = null;
  let isInPluralGroup = false;
  let isInCurrentConfig = false;
  let lineIndex = 0;
  while (lineIndex < allLines.length) {
    const trimmedLine = allLines[lineIndex].trim();
    if (_lodash.default.isEmpty(trimmedLine)) {
      ++lineIndex;
      continue;
    }
    if (['type', 'Package'].some(x => trimmedLine.startsWith(x))) {
      currentResourceId = null;
      isInPluralGroup = false;
      isInCurrentConfig = false;
      ++lineIndex;
      continue;
    }
    if (trimmedLine.startsWith('resource')) {
      isInPluralGroup = false;
      currentResourceId = null;
      isInCurrentConfig = false;
      if (trimmedLine.includes('string/')) {
        const match = /string\/(\S+)/.exec(trimmedLine);
        if (match) {
          currentResourceId = match[1];
        }
      } else if (trimmedLine.includes('plurals/')) {
        const match = /plurals\/(\S+)/.exec(trimmedLine);
        if (match) {
          currentResourceId = match[1];
          isInPluralGroup = true;
        }
      }
      ++lineIndex;
      continue;
    }
    if (currentResourceId) {
      if (isInPluralGroup) {
        if (trimmedLine.startsWith('(')) {
          isInCurrentConfig = trimmedLine.startsWith(`(${configMarker})`);
          ++lineIndex;
          continue;
        }
        if (isInCurrentConfig) {
          const [content, idx] = extractContent(lineIndex);
          lineIndex = idx;
          if (_lodash.default.isString(content)) {
            apkStrings[currentResourceId] = [...(apkStrings[currentResourceId] || []), content];
          }
        }
      } else if (trimmedLine.startsWith(`(${configMarker})`)) {
        const [content, idx] = extractContent(lineIndex);
        lineIndex = idx;
        if (_lodash.default.isString(content)) {
          apkStrings[currentResourceId] = content;
        }
        currentResourceId = null;
      }
    }
    ++lineIndex;
  }
  return apkStrings;
}
async function formatConfigMarker(configsGetter, desiredMarker, defaultMarker) {
  let configMarker = desiredMarker || defaultMarker;
  if (configMarker.includes('-') && !configMarker.includes('-r')) {
    configMarker = configMarker.replace('-', '-r');
  }
  const configs = await configsGetter();
  _logger.default.debug(`Resource configurations: ${JSON.stringify(configs)}`);
  if (configMarker.toLowerCase().startsWith('en') && !configs.some(x => x.trim() === configMarker)) {
    _logger.default.debug(`Resource configuration name '${configMarker}' is unknown. ` + `Replacing it with '${defaultMarker}'`);
    configMarker = defaultMarker;
  } else {
    _logger.default.debug(`Selected configuration: '${configMarker}'`);
  }
  return configMarker;
}
function parseJsonData(output, entityName) {
  if (!/\bresult=-1\b/.test(output) || !/\bdata="/.test(output)) {
    _logger.default.debug(output);
    throw new Error(`Cannot retrieve ${entityName} from the device. ` + 'Check the server log for more details');
  }
  const match = /\bdata=(".+)/.exec(output);
  if (!match) {
    _logger.default.debug(output);
    throw new Error(`Cannot parse ${entityName} from the command output. ` + 'Check the server log for more details');
  }
  const jsonStr = _lodash.default.trim(match[1]).replace(/(^")|("$)/g, '');
  try {
    return JSON.parse(jsonStr);
  } catch (e) {
    _logger.default.debug(jsonStr);
    throw new Error(`Cannot parse ${entityName} from the resulting data string. ` + 'Check the server log for more details');
  }
}
function toAvdLocaleArgs(language, country) {
  const result = [];
  if (language && _lodash.default.isString(language)) {
    result.push('-prop', `persist.sys.language=${language.toLowerCase()}`);
  }
  if (country && _lodash.default.isString(country)) {
    result.push('-prop', `persist.sys.country=${country.toUpperCase()}`);
  }
  let locale;
  if (_lodash.default.isString(language) && _lodash.default.isString(country) && language && country) {
    locale = language.toLowerCase() + '-' + country.toUpperCase();
  } else if (language && _lodash.default.isString(language)) {
    locale = language.toLowerCase();
  } else if (country && _lodash.default.isString(country)) {
    locale = country;
  }
  if (locale) {
    result.push('-prop', `persist.sys.locale=${locale}`);
  }
  return result;
}
async function getAndroidPrefsRoot() {
  let location = process.env.ANDROID_EMULATOR_HOME;
  if (await dirExists(location)) {
    return location;
  }
  if (location) {
    _logger.default.warn(`The value of the ANDROID_EMULATOR_HOME environment variable '${location}' is not an existing directory`);
  }
  const home = process.env.HOME || process.env.USERPROFILE;
  if (home) {
    location = _path.default.resolve(home, '.android');
  }
  if (!(await dirExists(location))) {
    _logger.default.debug(`Android config root '${location}' is not an existing directory`);
    return null;
  }
  return location;
}
async function dirExists(location) {
  return location && (await _support.fs.exists(location)) && (await _support.fs.stat(location)).isDirectory();
}
function escapeShellArg(arg) {
  arg = `${arg}`;
  if (_support.system.isWindows()) {
    return /[&|^\s]/.test(arg) ? `"${arg.replace(/"/g, '""')}"` : arg;
  }
  return arg.replace(/&/g, '\\&');
}
function parseLaunchableActivityNames(dumpsys) {
  const mainActivityNameRe = new RegExp(`^\\s*${_lodash.default.escapeRegExp(MAIN_ACTION)}:$`);
  const categoryNameRe = /^\s*Category:\s+"([a-zA-Z0-9._/-]+)"$/;
  const blocks = [];
  let blockStartIndent;
  let block = [];
  for (const line of dumpsys.split('\n').map(_lodash.default.trimEnd)) {
    const currentIndent = line.length - _lodash.default.trimStart(line).length;
    if (mainActivityNameRe.test(line)) {
      blockStartIndent = currentIndent;
      if (!_lodash.default.isEmpty(block)) {
        blocks.push(block);
        block = [];
      }
      continue;
    }
    if (_lodash.default.isNil(blockStartIndent)) {
      continue;
    }
    if (currentIndent > blockStartIndent) {
      block.push(line);
    } else {
      if (!_lodash.default.isEmpty(block)) {
        blocks.push(block);
        block = [];
      }
      blockStartIndent = null;
    }
  }
  if (!_lodash.default.isEmpty(block)) {
    blocks.push(block);
  }
  const result = [];
  for (const item of blocks) {
    let hasCategory = false;
    let isLauncherCategory = false;
    for (const line of item) {
      const match = categoryNameRe.exec(line);
      if (!match) {
        continue;
      }
      hasCategory = true;
      isLauncherCategory = match[1] === LAUNCHER_CATEGORY;
      break;
    }
    if (hasCategory && !isLauncherCategory) {
      continue;
    }
    for (const activityNameStr of item.map(_lodash.default.trim).filter(Boolean)) {
      const fqActivityName = activityNameStr.split(/\s+/)[1];
      if (!matchComponentName(fqActivityName)) {
        continue;
      }
      if (isLauncherCategory) {
        return [fqActivityName];
      }
      result.push(fqActivityName);
    }
  }
  return result;
}
function matchComponentName(classString) {
  return /^[a-z0-9./_]+$/i.exec(classString);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,