{"version":3,"file":"context.js","names":["CHROMEDRIVER_AUTODOWNLOAD_FEATURE","commands","helpers","extensions","getCurrentContext","curContext","defaultContextName","getContexts","webviewsMapping","webviewHelpers","getWebViewsMapping","adb","opts","assignContexts","setContext","name","util","hasValue","WEBVIEW_WIN","defaultWebviewName","contexts","_","includes","errors","NoSuchContextError","switchContext","mobileGetContexts","androidDeviceSocket","ensureWebviewsHavePages","webviewDevtoolsPort","enableWebviewDetailsCollection","Object","assign","isChromeSession","webviews","parseWebviewNames","NATIVE_WIN","log","debug","JSON","stringify","isChromedriverContext","startChromedriverProxy","recreateChromeDriverSessions","stopChromedriverProxies","suspendChromedriverProxy","Error","WEBVIEW_BASE","autoWebviewName","appPackage","isWebContext","context","cd","sessionChromedrivers","setupExistingChromedriver","cloneDeep","chromeUseRunningApp","extractChromeAndroidPackageFromContextName","androidPackage","match","length","chromeAndroidPackage","has","map","wm","webviewName","knownPackage","KNOWN_CHROME_PACKAGE_NAMES","appState","queryAppState","APP_STATE","RUNNING_IN_BACKGROUND","RUNNING_IN_FOREGROUND","info","setupNewChromedriver","curDeviceId","on","Chromedriver","EVENT_CHANGED","msg","state","STATE_STOPPED","onChromedriverStop","chromedriver","proxyReqRes","proxyReq","bind","proxyCommand","jwproxy","command","jwpProxyActive","warn","err","startUnexpectedShutdown","keys","removeAllListeners","stop","message","viewName","CHROMIUM_WIN","shouldDismissChromeWelcome","chromeOptions","isArray","args","dismissChromeWelcome","activity","getCurrentActivity","el","findElOrEls","click","ELEMENT","e","startChromeSession","knownPackages","chromeBundleId","chromeAndroidActivity","appActivity","hasWorkingWebview","restart","getChromedriverPort","portSpec","getPort","B","promisify","PortFinder","port","foundPort","potentialPort","stopPort","parseInt","isChromedriverAutodownloadEnabled","isFeatureEnabled","chromeDriverPort","chromedriverPort","chromedriverPorts","details","getWebviewDetails","undefined","isEmpty","executable","chromedriverExecutable","cmdArgs","chromedriverArgs","verbose","showChromedriverLog","executableDir","chromedriverExecutableDir","mappingPath","chromedriverChromeMappingFile","bundleId","useSystemExecutable","chromedriverUseSystemExecutable","disableBuildCheck","chromedriverDisableBuildCheck","isAutodownloadEnabled","opt","endsWith","merge","caps","createChromedriverCaps","start"],"sources":["../../../lib/commands/context.js"],"sourcesContent":["import _ from 'lodash';\nimport Chromedriver from 'appium-chromedriver';\nimport PortFinder from 'portfinder';\nimport B from 'bluebird';\nimport { util } from '@appium/support';\nimport { errors } from 'appium/driver';\nimport {\n  default as webviewHelpers,\n  NATIVE_WIN, WEBVIEW_BASE, WEBVIEW_WIN, CHROMIUM_WIN, KNOWN_CHROME_PACKAGE_NAMES\n} from '../webview-helpers';\nimport { APP_STATE } from '../android-helpers';\n\nconst CHROMEDRIVER_AUTODOWNLOAD_FEATURE = 'chromedriver_autodownload';\n\nlet commands = {}, helpers = {}, extensions = {};\n\n\n/* -------------------------------\n * Actual MJSONWP command handlers\n * ------------------------------- */\ncommands.getCurrentContext = async function getCurrentContext () { // eslint-disable-line require-await\n  // if the current context is `null`, indicating no context\n  // explicitly set, it is the default context\n  return this.curContext || this.defaultContextName();\n};\n\ncommands.getContexts = async function getContexts () {\n  const webviewsMapping = await webviewHelpers.getWebViewsMapping(this.adb, this.opts);\n  return this.assignContexts(webviewsMapping);\n};\n\ncommands.setContext = async function setContext (name) {\n  if (!util.hasValue(name)) {\n    name = this.defaultContextName();\n  } else if (name === WEBVIEW_WIN) {\n    // handle setContext \"WEBVIEW\"\n    name = this.defaultWebviewName();\n  }\n  // if we're already in the context we want, do nothing\n  if (name === this.curContext) {\n    return;\n  }\n\n  const webviewsMapping = await webviewHelpers.getWebViewsMapping(this.adb, this.opts);\n  const contexts = this.assignContexts(webviewsMapping);\n  // if the context we want doesn't exist, fail\n  if (!_.includes(contexts, name)) {\n    throw new errors.NoSuchContextError();\n  }\n\n  await this.switchContext(name, webviewsMapping);\n  this.curContext = name;\n};\n\n/**\n * @typedef {Object} WebviewsMapping\n * @property {string} proc The name of the Devtools Unix socket\n * @property {string} webview The web view alias. Looks like `WEBVIEW_`\n * prefix plus PID or package name\n * @property {?Object} info Webview information as it is retrieved by\n * /json/version CDP endpoint\n * @property {?Array<Object>} pages Webview pages list as it is retrieved by\n * /json/list CDP endpoint\n * @propery {?string} webviewName An actual webview name for switching context.\n * This value becomes null when failing to find a PID for a webview.\n *\n * The following json demonstrates the example of WebviewsMapping object.\n * Note that `description` in `page` can be an empty string most likely when it comes to Mobile Chrome)\n * {\n *   \"proc\": \"@webview_devtools_remote_22138\",\n *   \"webview\": \"WEBVIEW_22138\",\n *   \"info\": {\n *     \"Android-Package\": \"io.appium.settings\",\n *     \"Browser\": \"Chrome/74.0.3729.185\",\n *     \"Protocol-Version\": \"1.3\",\n *     \"User-Agent\": \"Mozilla/5.0 (Linux; Android 10; Android SDK built for x86 Build/QSR1.190920.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.185 Mobile Safari/537.36\",\n *     \"V8-Version\": \"7.4.288.28\",\n *     \"WebKit-Version\": \"537.36 (@22955682f94ce09336197bfb8dffea991fa32f0d)\",\n *     \"webSocketDebuggerUrl\": \"ws://127.0.0.1:10900/devtools/browser\"\n *   },\n *   \"pages\": [\n *     {\n *       \"description\": \"{\\\"attached\\\":true,\\\"empty\\\":false,\\\"height\\\":1458,\\\"screenX\\\":0,\\\"screenY\\\":336,\\\"visible\\\":true,\\\"width\\\":1080}\",\n *       \"devtoolsFrontendUrl\": \"http://chrome-devtools-frontend.appspot.com/serve_rev/@22955682f94ce09336197bfb8dffea991fa32f0d/inspector.html?ws=127.0.0.1:10900/devtools/page/27325CC50B600D31B233F45E09487B1F\",\n *       \"id\": \"27325CC50B600D31B233F45E09487B1F\",\n *       \"title\": \"Releases · appium/appium · GitHub\",\n *       \"type\": \"page\",\n *       \"url\": \"https://github.com/appium/appium/releases\",\n *       \"webSocketDebuggerUrl\": \"ws://127.0.0.1:10900/devtools/page/27325CC50B600D31B233F45E09487B1F\"\n *     }\n *   ],\n *   \"webviewName\": \"WEBVIEW_com.io.appium.setting\"\n * }\n */\n\n/**\n * Returns a webviewsMapping based on CDP endpoints\n *\n * @return {Array<WebviewsMapping>} webviewsMapping\n */\ncommands.mobileGetContexts = async function mobileGetContexts () {\n  const opts = {\n    androidDeviceSocket: this.opts.androidDeviceSocket,\n    ensureWebviewsHavePages: true,\n    webviewDevtoolsPort: this.opts.webviewDevtoolsPort,\n    enableWebviewDetailsCollection: true\n  };\n  return await webviewHelpers.getWebViewsMapping(this.adb, opts);\n};\n\nhelpers.assignContexts = function assignContexts (webviewsMapping) {\n  const opts = Object.assign({isChromeSession: this.isChromeSession}, this.opts);\n  const webviews = webviewHelpers.parseWebviewNames(webviewsMapping, opts);\n  this.contexts = [NATIVE_WIN, ...webviews];\n  this.log.debug(`Available contexts: ${JSON.stringify(this.contexts)}`);\n  return this.contexts;\n};\n\nhelpers.switchContext = async function switchContext (name, webviewsMapping) {\n  // We have some options when it comes to webviews. If we want a\n  // Chromedriver webview, we can only control one at a time.\n  if (this.isChromedriverContext(name)) {\n    // start proxying commands directly to chromedriver\n    await this.startChromedriverProxy(name, webviewsMapping);\n  } else if (this.isChromedriverContext(this.curContext)) {\n    // if we're moving to a non-chromedriver webview, and our current context\n    // _is_ a chromedriver webview, if caps recreateChromeDriverSessions is set\n    // to true then kill chromedriver session using stopChromedriverProxies or\n    // else simply suspend proxying to the latter\n    if (this.opts.recreateChromeDriverSessions) {\n      this.log.debug('recreateChromeDriverSessions set to true; killing existing chromedrivers');\n      await this.stopChromedriverProxies();\n    } else {\n      await this.suspendChromedriverProxy();\n    }\n  } else {\n    throw new Error(`Didn't know how to handle switching to context '${name}'`);\n  }\n};\n\n\n/* ---------------------------------\n * On-object context-related helpers\n * --------------------------------- */\n\n// The reason this is a function and not just a constant is that both android-\n// driver and selendroid-driver use this logic, and each one returns\n// a different default context name\nhelpers.defaultContextName = function defaultContextName () {\n  return NATIVE_WIN;\n};\n\nhelpers.defaultWebviewName = function defaultWebviewName () {\n  return WEBVIEW_BASE + (this.opts.autoWebviewName || this.opts.appPackage);\n};\n\nhelpers.isWebContext = function isWebContext () {\n  return this.curContext !== null && this.curContext !== NATIVE_WIN;\n};\n\n// Turn on proxying to an existing Chromedriver session or a new one\nhelpers.startChromedriverProxy = async function startChromedriverProxy (context, webviewsMapping) {\n  this.log.debug(`Connecting to chrome-backed webview context '${context}'`);\n\n  let cd;\n  if (this.sessionChromedrivers[context]) {\n    // in the case where we've already set up a chromedriver for a context,\n    // we want to reconnect to it, not create a whole new one\n    this.log.debug(`Found existing Chromedriver for context '${context}'. Using it.`);\n    cd = this.sessionChromedrivers[context];\n    await setupExistingChromedriver(this.log, cd);\n  } else {\n    let opts = _.cloneDeep(this.opts);\n    opts.chromeUseRunningApp = true;\n\n    // if requested, tell chromedriver to attach to the android package we have\n    // associated with the context name, rather than the package of the AUT.\n    // And turn this on by default for chrome--if chrome pops up with a webview\n    // and someone wants to switch to it, we should let chromedriver connect to\n    // chrome rather than staying stuck on the AUT\n    if (opts.extractChromeAndroidPackageFromContextName || context === `${WEBVIEW_BASE}chrome`) {\n      let androidPackage = context.match(`${WEBVIEW_BASE}(.+)`);\n      if (androidPackage && androidPackage.length > 0) {\n        opts.chromeAndroidPackage = androidPackage[1];\n      }\n      if (!opts.extractChromeAndroidPackageFromContextName) {\n        if (_.has(this.opts, 'enableWebviewDetailsCollection') && !this.opts.enableWebviewDetailsCollection) {\n          // When enableWebviewDetailsCollection capability is explicitly disabled, try to identify\n          // chromeAndroidPackage based on contexts, known chrome variant packages and queryAppState result\n          // since webviewsMapping does not have info object\n          const contexts = webviewsMapping.map((wm) => wm.webviewName);\n          for (const knownPackage of KNOWN_CHROME_PACKAGE_NAMES) {\n            if (_.includes(contexts, `${WEBVIEW_BASE}${knownPackage}`)) {\n              continue;\n            }\n            const appState = await this.queryAppState(knownPackage);\n            if (_.includes([APP_STATE.RUNNING_IN_BACKGROUND, APP_STATE.RUNNING_IN_FOREGROUND], appState)) {\n              opts.chromeAndroidPackage = knownPackage;\n              this.log.debug(`Identified chromeAndroidPackage as '${opts.chromeAndroidPackage}' ` +\n                `for context '${context}' by querying states of Chrome app packages`);\n              break;\n            }\n          }\n        } else {\n          for (const wm of webviewsMapping) {\n            if (wm.webviewName === context && _.has(wm?.info, 'Android-Package')) {\n              opts.chromeAndroidPackage = wm.info['Android-Package'];\n              this.log.debug(`Identified chromeAndroidPackage as '${opts.chromeAndroidPackage}' ` +\n                `for context '${context}' by CDP`);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    cd = await this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb, context);\n    // bind our stop/exit handler, passing in context so we know which\n    // one stopped unexpectedly\n    cd.on(Chromedriver.EVENT_CHANGED, (msg) => {\n      if (msg.state === Chromedriver.STATE_STOPPED) {\n        this.onChromedriverStop(context);\n      }\n    });\n    // save the chromedriver object under the context\n    this.sessionChromedrivers[context] = cd;\n  }\n  // hook up the local variables so we can proxy this biz\n  this.chromedriver = cd;\n  this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);\n  this.proxyCommand = this.chromedriver.jwproxy.command.bind(this.chromedriver.jwproxy);\n  this.jwpProxyActive = true;\n};\n\n// Stop proxying to any Chromedriver\nhelpers.suspendChromedriverProxy = function suspendChromedriverProxy () {\n  this.chromedriver = null;\n  this.proxyReqRes = null;\n  this.proxyCommand = null;\n  this.jwpProxyActive = false;\n};\n\n// Handle an out-of-band Chromedriver stop event\nhelpers.onChromedriverStop = async function onChromedriverStop (context) {\n  this.log.warn(`Chromedriver for context ${context} stopped unexpectedly`);\n  if (context === this.curContext) {\n    // we exited unexpectedly while automating the current context and so want\n    // to shut down the session and respond with an error\n    let err = new Error('Chromedriver quit unexpectedly during session');\n    await this.startUnexpectedShutdown(err);\n  } else {\n    // if a Chromedriver in the non-active context barfs, we don't really\n    // care, we'll just make a new one next time we need the context.\n    this.log.warn(\"Chromedriver quit unexpectedly, but it wasn't the active \" +\n      'context, ignoring');\n    delete this.sessionChromedrivers[context];\n  }\n};\n\n// Intentionally stop all the chromedrivers currently active, and ignore\n// their exit events\nhelpers.stopChromedriverProxies = async function stopChromedriverProxies () {\n  this.suspendChromedriverProxy(); // make sure we turn off the proxy flag\n  for (let context of _.keys(this.sessionChromedrivers)) {\n    let cd = this.sessionChromedrivers[context];\n    this.log.debug(`Stopping chromedriver for context ${context}`);\n    // stop listening for the stopped state event\n    cd.removeAllListeners(Chromedriver.EVENT_CHANGED);\n    try {\n      await cd.stop();\n    } catch (err) {\n      this.log.warn(`Error stopping Chromedriver: ${err.message}`);\n    }\n    delete this.sessionChromedrivers[context];\n  }\n};\n\nhelpers.isChromedriverContext = function isChromedriverContext (viewName) {\n  return _.includes(viewName, WEBVIEW_WIN) || viewName === CHROMIUM_WIN;\n};\n\nhelpers.shouldDismissChromeWelcome = function shouldDismissChromeWelcome () {\n  return !!this.opts.chromeOptions &&\n         _.isArray(this.opts.chromeOptions.args) &&\n         this.opts.chromeOptions.args.includes('--no-first-run');\n};\n\nhelpers.dismissChromeWelcome = async function dismissChromeWelcome () {\n  this.log.info('Trying to dismiss Chrome welcome');\n  let activity = await this.getCurrentActivity();\n  if (activity !== 'org.chromium.chrome.browser.firstrun.FirstRunActivity') {\n    this.log.info('Chrome welcome dialog never showed up! Continuing');\n    return;\n  }\n  let el = await this.findElOrEls('id', 'com.android.chrome:id/terms_accept', false);\n  await this.click(el.ELEMENT);\n  try {\n    let el = await this.findElOrEls('id', 'com.android.chrome:id/negative_button', false);\n    await this.click(el.ELEMENT);\n  } catch (e) {\n    // DO NOTHING, THIS DEVICE DIDNT LAUNCH THE SIGNIN DIALOG\n    // IT MUST BE A NON GMS DEVICE\n    this.log.warn(`This device did not show Chrome SignIn dialog, ${e.message}`);\n  }\n};\n\nhelpers.startChromeSession = async function startChromeSession () {\n  this.log.info('Starting a chrome-based browser session');\n  let opts = _.cloneDeep(this.opts);\n\n  const knownPackages = [\n    'org.chromium.chrome.shell',\n    'com.android.chrome',\n    'com.chrome.beta',\n    'org.chromium.chrome',\n    'org.chromium.webview_shell',\n  ];\n\n  if (_.includes(knownPackages, this.opts.appPackage)) {\n    opts.chromeBundleId = this.opts.appPackage;\n  } else {\n    opts.chromeAndroidActivity = this.opts.appActivity;\n  }\n  this.chromedriver = await this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb);\n  this.chromedriver.on(Chromedriver.EVENT_CHANGED, (msg) => {\n    if (msg.state === Chromedriver.STATE_STOPPED) {\n      this.onChromedriverStop(CHROMIUM_WIN);\n    }\n  });\n\n  // Now that we have a Chrome session, we ensure that the context is\n  // appropriately set and that this chromedriver is added to the list\n  // of session chromedrivers so we can switch back and forth\n  this.curContext = CHROMIUM_WIN;\n  this.sessionChromedrivers[CHROMIUM_WIN] = this.chromedriver;\n  this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);\n  this.proxyCommand = this.chromedriver.jwproxy.command.bind(this.chromedriver.jwproxy);\n  this.jwpProxyActive = true;\n\n  if (this.shouldDismissChromeWelcome()) {\n    // dismiss Chrome welcome dialog\n    await this.dismissChromeWelcome();\n  }\n};\n\n\n/* --------------------------\n * Internal library functions\n * -------------------------- */\n\nasync function setupExistingChromedriver (log, chromedriver) {\n  // check the status by sending a simple window-based command to ChromeDriver\n  // if there is an error, we want to recreate the ChromeDriver session\n  if (!await chromedriver.hasWorkingWebview()) {\n    log.debug('ChromeDriver is not associated with a window. ' +\n                 'Re-initializing the session.');\n    await chromedriver.restart();\n  }\n  return chromedriver;\n}\n\n/**\n * Find a free port to have Chromedriver listen on.\n *\n * @param {array} portSpec - Array which is a list of ports. A list item may\n * also itself be an array of length 2 specifying a start and end port of\n * a range. Some valid port specs:\n *    - [8000, 8001, 8002]\n *    - [[8000, 8005]]\n *    - [8000, [9000, 9100]]\n * @param {Object?} log Logger instance\n *\n * @return {number} A free port\n */\nasync function getChromedriverPort (portSpec, log = null) {\n  const getPort = B.promisify(PortFinder.getPort, {context: PortFinder});\n\n  // if the user didn't give us any specific information about chromedriver\n  // port ranges, just find any free port\n  if (!portSpec) {\n    const port = await getPort();\n    log?.debug(`A port was not given, using random free port: ${port}`);\n    return port;\n  }\n\n  // otherwise find the free port based on a list or range provided by the user\n  log?.debug(`Finding a free port for chromedriver using spec ${JSON.stringify(portSpec)}`);\n  let foundPort = null;\n  for (const potentialPort of portSpec) {\n    let port, stopPort;\n    if (_.isArray(potentialPort)) {\n      ([port, stopPort] = potentialPort);\n    } else {\n      port = parseInt(potentialPort, 10); // ensure we have a number and not a string\n      stopPort = port;\n    }\n    try {\n      log?.debug(`Checking port range ${port}:${stopPort}`);\n      foundPort = await getPort({port, stopPort});\n      break;\n    } catch (e) {\n      log?.debug(`Nothing in port range ${port}:${stopPort} was available`);\n    }\n  }\n\n  if (foundPort === null) {\n    throw new Error(`Could not find a free port for chromedriver using ` +\n                    `chromedriverPorts spec ${JSON.stringify(portSpec)}`);\n  }\n\n  log?.debug(`Using free port ${foundPort} for chromedriver`);\n  return foundPort;\n}\n\nhelpers.isChromedriverAutodownloadEnabled = function isChromedriverAutodownloadEnabled () {\n  if (this.isFeatureEnabled(CHROMEDRIVER_AUTODOWNLOAD_FEATURE)) {\n    return true;\n  }\n  this?.log?.debug(`Automated Chromedriver download is disabled. ` +\n    `Use '${CHROMEDRIVER_AUTODOWNLOAD_FEATURE}' server feature to enable it`);\n  return false;\n};\n\nhelpers.setupNewChromedriver = async function setupNewChromedriver (opts, curDeviceId, adb, context = null) {\n  if (opts.chromeDriverPort) {\n    this?.log?.warn(`The 'chromeDriverPort' capability is deprecated. Please use 'chromedriverPort' instead`);\n    opts.chromedriverPort = opts.chromeDriverPort;\n  }\n\n  if (opts.chromedriverPort) {\n    this?.log?.debug(`Using user-specified port ${opts.chromedriverPort} for chromedriver`);\n  } else {\n    // if a single port wasn't given, we'll look for a free one\n    opts.chromedriverPort = await getChromedriverPort(opts.chromedriverPorts, this?.log);\n  }\n\n  const details = context ? webviewHelpers.getWebviewDetails(adb, context) : undefined;\n  if (!_.isEmpty(details)) {\n    this?.log?.debug('Passing web view details to the Chromedriver constructor: ' +\n      JSON.stringify(details, null, 2));\n  }\n\n  const chromedriver = new Chromedriver({\n    port: opts.chromedriverPort,\n    executable: opts.chromedriverExecutable,\n    adb,\n    cmdArgs: opts.chromedriverArgs,\n    verbose: !!opts.showChromedriverLog,\n    executableDir: opts.chromedriverExecutableDir,\n    mappingPath: opts.chromedriverChromeMappingFile,\n    bundleId: opts.chromeBundleId,\n    useSystemExecutable: opts.chromedriverUseSystemExecutable,\n    disableBuildCheck: opts.chromedriverDisableBuildCheck,\n    details,\n    isAutodownloadEnabled: this?.isChromedriverAutodownloadEnabled?.()\n  });\n\n  // make sure there are chromeOptions\n  opts.chromeOptions = opts.chromeOptions || {};\n  // try out any prefixed chromeOptions,\n  // and strip the prefix\n  for (const opt of _.keys(opts)) {\n    if (opt.endsWith(':chromeOptions')) {\n      this?.log?.warn(`Merging '${opt}' into 'chromeOptions'. This may cause unexpected behavior`);\n      _.merge(opts.chromeOptions, opts[opt]);\n    }\n  }\n\n  const caps = webviewHelpers.createChromedriverCaps(opts, curDeviceId, details);\n  this?.log?.debug(`Before starting chromedriver, androidPackage is '${caps.chromeOptions.androidPackage}'`);\n  await chromedriver.start(caps);\n  return chromedriver;\n};\nconst setupNewChromedriver = helpers.setupNewChromedriver;\n\n\nObject.assign(extensions, commands, helpers);\nexport { commands, helpers, setupNewChromedriver };\nexport default extensions;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAA+C;AAAA;AAE/C,MAAMA,iCAAiC,GAAG,2BAA2B;AAErE,IAAIC,QAAQ,GAAG,CAAC,CAAC;EAAEC,OAAO,GAAG,CAAC,CAAC;EAAEC,UAAU,GAAG,CAAC,CAAC;AAAC;AAAA;AAMjDF,QAAQ,CAACG,iBAAiB,GAAG,eAAeA,iBAAiB,GAAI;EAG/D,OAAO,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,kBAAkB,EAAE;AACrD,CAAC;AAEDL,QAAQ,CAACM,WAAW,GAAG,eAAeA,WAAW,GAAI;EACnD,MAAMC,eAAe,GAAG,MAAMC,uBAAc,CAACC,kBAAkB,CAAC,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,IAAI,CAAC;EACpF,OAAO,IAAI,CAACC,cAAc,CAACL,eAAe,CAAC;AAC7C,CAAC;AAEDP,QAAQ,CAACa,UAAU,GAAG,eAAeA,UAAU,CAAEC,IAAI,EAAE;EACrD,IAAI,CAACC,aAAI,CAACC,QAAQ,CAACF,IAAI,CAAC,EAAE;IACxBA,IAAI,GAAG,IAAI,CAACT,kBAAkB,EAAE;EAClC,CAAC,MAAM,IAAIS,IAAI,KAAKG,2BAAW,EAAE;IAE/BH,IAAI,GAAG,IAAI,CAACI,kBAAkB,EAAE;EAClC;EAEA,IAAIJ,IAAI,KAAK,IAAI,CAACV,UAAU,EAAE;IAC5B;EACF;EAEA,MAAMG,eAAe,GAAG,MAAMC,uBAAc,CAACC,kBAAkB,CAAC,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,IAAI,CAAC;EACpF,MAAMQ,QAAQ,GAAG,IAAI,CAACP,cAAc,CAACL,eAAe,CAAC;EAErD,IAAI,CAACa,eAAC,CAACC,QAAQ,CAACF,QAAQ,EAAEL,IAAI,CAAC,EAAE;IAC/B,MAAM,IAAIQ,cAAM,CAACC,kBAAkB,EAAE;EACvC;EAEA,MAAM,IAAI,CAACC,aAAa,CAACV,IAAI,EAAEP,eAAe,CAAC;EAC/C,IAAI,CAACH,UAAU,GAAGU,IAAI;AACxB,CAAC;AAgDDd,QAAQ,CAACyB,iBAAiB,GAAG,eAAeA,iBAAiB,GAAI;EAC/D,MAAMd,IAAI,GAAG;IACXe,mBAAmB,EAAE,IAAI,CAACf,IAAI,CAACe,mBAAmB;IAClDC,uBAAuB,EAAE,IAAI;IAC7BC,mBAAmB,EAAE,IAAI,CAACjB,IAAI,CAACiB,mBAAmB;IAClDC,8BAA8B,EAAE;EAClC,CAAC;EACD,OAAO,MAAMrB,uBAAc,CAACC,kBAAkB,CAAC,IAAI,CAACC,GAAG,EAAEC,IAAI,CAAC;AAChE,CAAC;AAEDV,OAAO,CAACW,cAAc,GAAG,SAASA,cAAc,CAAEL,eAAe,EAAE;EACjE,MAAMI,IAAI,GAAGmB,MAAM,CAACC,MAAM,CAAC;IAACC,eAAe,EAAE,IAAI,CAACA;EAAe,CAAC,EAAE,IAAI,CAACrB,IAAI,CAAC;EAC9E,MAAMsB,QAAQ,GAAGzB,uBAAc,CAAC0B,iBAAiB,CAAC3B,eAAe,EAAEI,IAAI,CAAC;EACxE,IAAI,CAACQ,QAAQ,GAAG,CAACgB,0BAAU,EAAE,GAAGF,QAAQ,CAAC;EACzC,IAAI,CAACG,GAAG,CAACC,KAAK,CAAE,uBAAsBC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACpB,QAAQ,CAAE,EAAC,CAAC;EACtE,OAAO,IAAI,CAACA,QAAQ;AACtB,CAAC;AAEDlB,OAAO,CAACuB,aAAa,GAAG,eAAeA,aAAa,CAAEV,IAAI,EAAEP,eAAe,EAAE;EAG3E,IAAI,IAAI,CAACiC,qBAAqB,CAAC1B,IAAI,CAAC,EAAE;IAEpC,MAAM,IAAI,CAAC2B,sBAAsB,CAAC3B,IAAI,EAAEP,eAAe,CAAC;EAC1D,CAAC,MAAM,IAAI,IAAI,CAACiC,qBAAqB,CAAC,IAAI,CAACpC,UAAU,CAAC,EAAE;IAKtD,IAAI,IAAI,CAACO,IAAI,CAAC+B,4BAA4B,EAAE;MAC1C,IAAI,CAACN,GAAG,CAACC,KAAK,CAAC,0EAA0E,CAAC;MAC1F,MAAM,IAAI,CAACM,uBAAuB,EAAE;IACtC,CAAC,MAAM;MACL,MAAM,IAAI,CAACC,wBAAwB,EAAE;IACvC;EACF,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAE,mDAAkD/B,IAAK,GAAE,CAAC;EAC7E;AACF,CAAC;AAUDb,OAAO,CAACI,kBAAkB,GAAG,SAASA,kBAAkB,GAAI;EAC1D,OAAO8B,0BAAU;AACnB,CAAC;AAEDlC,OAAO,CAACiB,kBAAkB,GAAG,SAASA,kBAAkB,GAAI;EAC1D,OAAO4B,4BAAY,IAAI,IAAI,CAACnC,IAAI,CAACoC,eAAe,IAAI,IAAI,CAACpC,IAAI,CAACqC,UAAU,CAAC;AAC3E,CAAC;AAED/C,OAAO,CAACgD,YAAY,GAAG,SAASA,YAAY,GAAI;EAC9C,OAAO,IAAI,CAAC7C,UAAU,KAAK,IAAI,IAAI,IAAI,CAACA,UAAU,KAAK+B,0BAAU;AACnE,CAAC;AAGDlC,OAAO,CAACwC,sBAAsB,GAAG,eAAeA,sBAAsB,CAAES,OAAO,EAAE3C,eAAe,EAAE;EAChG,IAAI,CAAC6B,GAAG,CAACC,KAAK,CAAE,gDAA+Ca,OAAQ,GAAE,CAAC;EAE1E,IAAIC,EAAE;EACN,IAAI,IAAI,CAACC,oBAAoB,CAACF,OAAO,CAAC,EAAE;IAGtC,IAAI,CAACd,GAAG,CAACC,KAAK,CAAE,4CAA2Ca,OAAQ,cAAa,CAAC;IACjFC,EAAE,GAAG,IAAI,CAACC,oBAAoB,CAACF,OAAO,CAAC;IACvC,MAAMG,yBAAyB,CAAC,IAAI,CAACjB,GAAG,EAAEe,EAAE,CAAC;EAC/C,CAAC,MAAM;IACL,IAAIxC,IAAI,GAAGS,eAAC,CAACkC,SAAS,CAAC,IAAI,CAAC3C,IAAI,CAAC;IACjCA,IAAI,CAAC4C,mBAAmB,GAAG,IAAI;IAO/B,IAAI5C,IAAI,CAAC6C,0CAA0C,IAAIN,OAAO,KAAM,GAAEJ,4BAAa,QAAO,EAAE;MAC1F,IAAIW,cAAc,GAAGP,OAAO,CAACQ,KAAK,CAAE,GAAEZ,4BAAa,MAAK,CAAC;MACzD,IAAIW,cAAc,IAAIA,cAAc,CAACE,MAAM,GAAG,CAAC,EAAE;QAC/ChD,IAAI,CAACiD,oBAAoB,GAAGH,cAAc,CAAC,CAAC,CAAC;MAC/C;MACA,IAAI,CAAC9C,IAAI,CAAC6C,0CAA0C,EAAE;QACpD,IAAIpC,eAAC,CAACyC,GAAG,CAAC,IAAI,CAAClD,IAAI,EAAE,gCAAgC,CAAC,IAAI,CAAC,IAAI,CAACA,IAAI,CAACkB,8BAA8B,EAAE;UAInG,MAAMV,QAAQ,GAAGZ,eAAe,CAACuD,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACC,WAAW,CAAC;UAC5D,KAAK,MAAMC,YAAY,IAAIC,0CAA0B,EAAE;YACrD,IAAI9C,eAAC,CAACC,QAAQ,CAACF,QAAQ,EAAG,GAAE2B,4BAAa,GAAEmB,YAAa,EAAC,CAAC,EAAE;cAC1D;YACF;YACA,MAAME,QAAQ,GAAG,MAAM,IAAI,CAACC,aAAa,CAACH,YAAY,CAAC;YACvD,IAAI7C,eAAC,CAACC,QAAQ,CAAC,CAACgD,yBAAS,CAACC,qBAAqB,EAAED,yBAAS,CAACE,qBAAqB,CAAC,EAAEJ,QAAQ,CAAC,EAAE;cAC5FxD,IAAI,CAACiD,oBAAoB,GAAGK,YAAY;cACxC,IAAI,CAAC7B,GAAG,CAACC,KAAK,CAAE,uCAAsC1B,IAAI,CAACiD,oBAAqB,IAAG,GAChF,gBAAeV,OAAQ,6CAA4C,CAAC;cACvE;YACF;UACF;QACF,CAAC,MAAM;UACL,KAAK,MAAMa,EAAE,IAAIxD,eAAe,EAAE;YAChC,IAAIwD,EAAE,CAACC,WAAW,KAAKd,OAAO,IAAI9B,eAAC,CAACyC,GAAG,CAACE,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAES,IAAI,EAAE,iBAAiB,CAAC,EAAE;cACpE7D,IAAI,CAACiD,oBAAoB,GAAGG,EAAE,CAACS,IAAI,CAAC,iBAAiB,CAAC;cACtD,IAAI,CAACpC,GAAG,CAACC,KAAK,CAAE,uCAAsC1B,IAAI,CAACiD,oBAAqB,IAAG,GAChF,gBAAeV,OAAQ,UAAS,CAAC;cACpC;YACF;UACF;QACF;MACF;IACF;IAEAC,EAAE,GAAG,MAAM,IAAI,CAACsB,oBAAoB,CAAC9D,IAAI,EAAE,IAAI,CAACD,GAAG,CAACgE,WAAW,EAAE,IAAI,CAAChE,GAAG,EAAEwC,OAAO,CAAC;IAGnFC,EAAE,CAACwB,EAAE,CAACC,2BAAY,CAACC,aAAa,EAAGC,GAAG,IAAK;MACzC,IAAIA,GAAG,CAACC,KAAK,KAAKH,2BAAY,CAACI,aAAa,EAAE;QAC5C,IAAI,CAACC,kBAAkB,CAAC/B,OAAO,CAAC;MAClC;IACF,CAAC,CAAC;IAEF,IAAI,CAACE,oBAAoB,CAACF,OAAO,CAAC,GAAGC,EAAE;EACzC;EAEA,IAAI,CAAC+B,YAAY,GAAG/B,EAAE;EACtB,IAAI,CAACgC,WAAW,GAAG,IAAI,CAACD,YAAY,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC;EACrE,IAAI,CAACI,YAAY,GAAG,IAAI,CAACJ,YAAY,CAACK,OAAO,CAACC,OAAO,CAACH,IAAI,CAAC,IAAI,CAACH,YAAY,CAACK,OAAO,CAAC;EACrF,IAAI,CAACE,cAAc,GAAG,IAAI;AAC5B,CAAC;AAGDxF,OAAO,CAAC2C,wBAAwB,GAAG,SAASA,wBAAwB,GAAI;EACtE,IAAI,CAACsC,YAAY,GAAG,IAAI;EACxB,IAAI,CAACC,WAAW,GAAG,IAAI;EACvB,IAAI,CAACG,YAAY,GAAG,IAAI;EACxB,IAAI,CAACG,cAAc,GAAG,KAAK;AAC7B,CAAC;AAGDxF,OAAO,CAACgF,kBAAkB,GAAG,eAAeA,kBAAkB,CAAE/B,OAAO,EAAE;EACvE,IAAI,CAACd,GAAG,CAACsD,IAAI,CAAE,4BAA2BxC,OAAQ,uBAAsB,CAAC;EACzE,IAAIA,OAAO,KAAK,IAAI,CAAC9C,UAAU,EAAE;IAG/B,IAAIuF,GAAG,GAAG,IAAI9C,KAAK,CAAC,+CAA+C,CAAC;IACpE,MAAM,IAAI,CAAC+C,uBAAuB,CAACD,GAAG,CAAC;EACzC,CAAC,MAAM;IAGL,IAAI,CAACvD,GAAG,CAACsD,IAAI,CAAC,2DAA2D,GACvE,mBAAmB,CAAC;IACtB,OAAO,IAAI,CAACtC,oBAAoB,CAACF,OAAO,CAAC;EAC3C;AACF,CAAC;AAIDjD,OAAO,CAAC0C,uBAAuB,GAAG,eAAeA,uBAAuB,GAAI;EAC1E,IAAI,CAACC,wBAAwB,EAAE;EAC/B,KAAK,IAAIM,OAAO,IAAI9B,eAAC,CAACyE,IAAI,CAAC,IAAI,CAACzC,oBAAoB,CAAC,EAAE;IACrD,IAAID,EAAE,GAAG,IAAI,CAACC,oBAAoB,CAACF,OAAO,CAAC;IAC3C,IAAI,CAACd,GAAG,CAACC,KAAK,CAAE,qCAAoCa,OAAQ,EAAC,CAAC;IAE9DC,EAAE,CAAC2C,kBAAkB,CAAClB,2BAAY,CAACC,aAAa,CAAC;IACjD,IAAI;MACF,MAAM1B,EAAE,CAAC4C,IAAI,EAAE;IACjB,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZ,IAAI,CAACvD,GAAG,CAACsD,IAAI,CAAE,gCAA+BC,GAAG,CAACK,OAAQ,EAAC,CAAC;IAC9D;IACA,OAAO,IAAI,CAAC5C,oBAAoB,CAACF,OAAO,CAAC;EAC3C;AACF,CAAC;AAEDjD,OAAO,CAACuC,qBAAqB,GAAG,SAASA,qBAAqB,CAAEyD,QAAQ,EAAE;EACxE,OAAO7E,eAAC,CAACC,QAAQ,CAAC4E,QAAQ,EAAEhF,2BAAW,CAAC,IAAIgF,QAAQ,KAAKC,4BAAY;AACvE,CAAC;AAEDjG,OAAO,CAACkG,0BAA0B,GAAG,SAASA,0BAA0B,GAAI;EAC1E,OAAO,CAAC,CAAC,IAAI,CAACxF,IAAI,CAACyF,aAAa,IACzBhF,eAAC,CAACiF,OAAO,CAAC,IAAI,CAAC1F,IAAI,CAACyF,aAAa,CAACE,IAAI,CAAC,IACvC,IAAI,CAAC3F,IAAI,CAACyF,aAAa,CAACE,IAAI,CAACjF,QAAQ,CAAC,gBAAgB,CAAC;AAChE,CAAC;AAEDpB,OAAO,CAACsG,oBAAoB,GAAG,eAAeA,oBAAoB,GAAI;EACpE,IAAI,CAACnE,GAAG,CAACoC,IAAI,CAAC,kCAAkC,CAAC;EACjD,IAAIgC,QAAQ,GAAG,MAAM,IAAI,CAACC,kBAAkB,EAAE;EAC9C,IAAID,QAAQ,KAAK,uDAAuD,EAAE;IACxE,IAAI,CAACpE,GAAG,CAACoC,IAAI,CAAC,mDAAmD,CAAC;IAClE;EACF;EACA,IAAIkC,EAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC,IAAI,EAAE,oCAAoC,EAAE,KAAK,CAAC;EAClF,MAAM,IAAI,CAACC,KAAK,CAACF,EAAE,CAACG,OAAO,CAAC;EAC5B,IAAI;IACF,IAAIH,EAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC,IAAI,EAAE,uCAAuC,EAAE,KAAK,CAAC;IACrF,MAAM,IAAI,CAACC,KAAK,CAACF,EAAE,CAACG,OAAO,CAAC;EAC9B,CAAC,CAAC,OAAOC,CAAC,EAAE;IAGV,IAAI,CAAC1E,GAAG,CAACsD,IAAI,CAAE,kDAAiDoB,CAAC,CAACd,OAAQ,EAAC,CAAC;EAC9E;AACF,CAAC;AAED/F,OAAO,CAAC8G,kBAAkB,GAAG,eAAeA,kBAAkB,GAAI;EAChE,IAAI,CAAC3E,GAAG,CAACoC,IAAI,CAAC,yCAAyC,CAAC;EACxD,IAAI7D,IAAI,GAAGS,eAAC,CAACkC,SAAS,CAAC,IAAI,CAAC3C,IAAI,CAAC;EAEjC,MAAMqG,aAAa,GAAG,CACpB,2BAA2B,EAC3B,oBAAoB,EACpB,iBAAiB,EACjB,qBAAqB,EACrB,4BAA4B,CAC7B;EAED,IAAI5F,eAAC,CAACC,QAAQ,CAAC2F,aAAa,EAAE,IAAI,CAACrG,IAAI,CAACqC,UAAU,CAAC,EAAE;IACnDrC,IAAI,CAACsG,cAAc,GAAG,IAAI,CAACtG,IAAI,CAACqC,UAAU;EAC5C,CAAC,MAAM;IACLrC,IAAI,CAACuG,qBAAqB,GAAG,IAAI,CAACvG,IAAI,CAACwG,WAAW;EACpD;EACA,IAAI,CAACjC,YAAY,GAAG,MAAM,IAAI,CAACT,oBAAoB,CAAC9D,IAAI,EAAE,IAAI,CAACD,GAAG,CAACgE,WAAW,EAAE,IAAI,CAAChE,GAAG,CAAC;EACzF,IAAI,CAACwE,YAAY,CAACP,EAAE,CAACC,2BAAY,CAACC,aAAa,EAAGC,GAAG,IAAK;IACxD,IAAIA,GAAG,CAACC,KAAK,KAAKH,2BAAY,CAACI,aAAa,EAAE;MAC5C,IAAI,CAACC,kBAAkB,CAACiB,4BAAY,CAAC;IACvC;EACF,CAAC,CAAC;EAKF,IAAI,CAAC9F,UAAU,GAAG8F,4BAAY;EAC9B,IAAI,CAAC9C,oBAAoB,CAAC8C,4BAAY,CAAC,GAAG,IAAI,CAAChB,YAAY;EAC3D,IAAI,CAACC,WAAW,GAAG,IAAI,CAACD,YAAY,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC;EACrE,IAAI,CAACI,YAAY,GAAG,IAAI,CAACJ,YAAY,CAACK,OAAO,CAACC,OAAO,CAACH,IAAI,CAAC,IAAI,CAACH,YAAY,CAACK,OAAO,CAAC;EACrF,IAAI,CAACE,cAAc,GAAG,IAAI;EAE1B,IAAI,IAAI,CAACU,0BAA0B,EAAE,EAAE;IAErC,MAAM,IAAI,CAACI,oBAAoB,EAAE;EACnC;AACF,CAAC;AAOD,eAAelD,yBAAyB,CAAEjB,GAAG,EAAE8C,YAAY,EAAE;EAG3D,IAAI,EAAC,MAAMA,YAAY,CAACkC,iBAAiB,EAAE,GAAE;IAC3ChF,GAAG,CAACC,KAAK,CAAC,gDAAgD,GAC7C,8BAA8B,CAAC;IAC5C,MAAM6C,YAAY,CAACmC,OAAO,EAAE;EAC9B;EACA,OAAOnC,YAAY;AACrB;AAeA,eAAeoC,mBAAmB,CAAEC,QAAQ,EAAEnF,GAAG,GAAG,IAAI,EAAE;EACxD,MAAMoF,OAAO,GAAGC,iBAAC,CAACC,SAAS,CAACC,mBAAU,CAACH,OAAO,EAAE;IAACtE,OAAO,EAAEyE;EAAU,CAAC,CAAC;EAItE,IAAI,CAACJ,QAAQ,EAAE;IACb,MAAMK,IAAI,GAAG,MAAMJ,OAAO,EAAE;IAC5BpF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,KAAK,CAAE,iDAAgDuF,IAAK,EAAC,CAAC;IACnE,OAAOA,IAAI;EACb;EAGAxF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,KAAK,CAAE,mDAAkDC,IAAI,CAACC,SAAS,CAACgF,QAAQ,CAAE,EAAC,CAAC;EACzF,IAAIM,SAAS,GAAG,IAAI;EACpB,KAAK,MAAMC,aAAa,IAAIP,QAAQ,EAAE;IACpC,IAAIK,IAAI,EAAEG,QAAQ;IAClB,IAAI3G,eAAC,CAACiF,OAAO,CAACyB,aAAa,CAAC,EAAE;MAC3B,CAACF,IAAI,EAAEG,QAAQ,CAAC,GAAGD,aAAa;IACnC,CAAC,MAAM;MACLF,IAAI,GAAGI,QAAQ,CAACF,aAAa,EAAE,EAAE,CAAC;MAClCC,QAAQ,GAAGH,IAAI;IACjB;IACA,IAAI;MACFxF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,KAAK,CAAE,uBAAsBuF,IAAK,IAAGG,QAAS,EAAC,CAAC;MACrDF,SAAS,GAAG,MAAML,OAAO,CAAC;QAACI,IAAI;QAAEG;MAAQ,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOjB,CAAC,EAAE;MACV1E,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,KAAK,CAAE,yBAAwBuF,IAAK,IAAGG,QAAS,gBAAe,CAAC;IACvE;EACF;EAEA,IAAIF,SAAS,KAAK,IAAI,EAAE;IACtB,MAAM,IAAIhF,KAAK,CAAE,oDAAmD,GACnD,0BAAyBP,IAAI,CAACC,SAAS,CAACgF,QAAQ,CAAE,EAAC,CAAC;EACvE;EAEAnF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,KAAK,CAAE,mBAAkBwF,SAAU,mBAAkB,CAAC;EAC3D,OAAOA,SAAS;AAClB;AAEA5H,OAAO,CAACgI,iCAAiC,GAAG,SAASA,iCAAiC,GAAI;EAAA;EACxF,IAAI,IAAI,CAACC,gBAAgB,CAACnI,iCAAiC,CAAC,EAAE;IAC5D,OAAO,IAAI;EACb;EACA,IAAI,aAAJ,IAAI,oCAAJ,IAAI,CAAEqC,GAAG,8CAAT,UAAWC,KAAK,CAAE,+CAA8C,GAC7D,QAAOtC,iCAAkC,+BAA8B,CAAC;EAC3E,OAAO,KAAK;AACd,CAAC;AAEDE,OAAO,CAACwE,oBAAoB,GAAG,eAAeA,oBAAoB,CAAE9D,IAAI,EAAE+D,WAAW,EAAEhE,GAAG,EAAEwC,OAAO,GAAG,IAAI,EAAE;EAAA;EAC1G,IAAIvC,IAAI,CAACwH,gBAAgB,EAAE;IAAA;IACzB,IAAI,aAAJ,IAAI,qCAAJ,IAAI,CAAE/F,GAAG,+CAAT,WAAWsD,IAAI,CAAE,wFAAuF,CAAC;IACzG/E,IAAI,CAACyH,gBAAgB,GAAGzH,IAAI,CAACwH,gBAAgB;EAC/C;EAEA,IAAIxH,IAAI,CAACyH,gBAAgB,EAAE;IAAA;IACzB,IAAI,aAAJ,IAAI,qCAAJ,IAAI,CAAEhG,GAAG,+CAAT,WAAWC,KAAK,CAAE,6BAA4B1B,IAAI,CAACyH,gBAAiB,mBAAkB,CAAC;EACzF,CAAC,MAAM;IAELzH,IAAI,CAACyH,gBAAgB,GAAG,MAAMd,mBAAmB,CAAC3G,IAAI,CAAC0H,iBAAiB,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAEjG,GAAG,CAAC;EACtF;EAEA,MAAMkG,OAAO,GAAGpF,OAAO,GAAG1C,uBAAc,CAAC+H,iBAAiB,CAAC7H,GAAG,EAAEwC,OAAO,CAAC,GAAGsF,SAAS;EACpF,IAAI,CAACpH,eAAC,CAACqH,OAAO,CAACH,OAAO,CAAC,EAAE;IAAA;IACvB,IAAI,aAAJ,IAAI,qCAAJ,IAAI,CAAElG,GAAG,+CAAT,WAAWC,KAAK,CAAC,4DAA4D,GAC3EC,IAAI,CAACC,SAAS,CAAC+F,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EACrC;EAEA,MAAMpD,YAAY,GAAG,IAAIN,2BAAY,CAAC;IACpCgD,IAAI,EAAEjH,IAAI,CAACyH,gBAAgB;IAC3BM,UAAU,EAAE/H,IAAI,CAACgI,sBAAsB;IACvCjI,GAAG;IACHkI,OAAO,EAAEjI,IAAI,CAACkI,gBAAgB;IAC9BC,OAAO,EAAE,CAAC,CAACnI,IAAI,CAACoI,mBAAmB;IACnCC,aAAa,EAAErI,IAAI,CAACsI,yBAAyB;IAC7CC,WAAW,EAAEvI,IAAI,CAACwI,6BAA6B;IAC/CC,QAAQ,EAAEzI,IAAI,CAACsG,cAAc;IAC7BoC,mBAAmB,EAAE1I,IAAI,CAAC2I,+BAA+B;IACzDC,iBAAiB,EAAE5I,IAAI,CAAC6I,6BAA6B;IACrDlB,OAAO;IACPmB,qBAAqB,EAAE,IAAI,aAAJ,IAAI,gDAAJ,IAAI,CAAExB,iCAAiC,0DAAvC,+BAAI;EAC7B,CAAC,CAAC;EAGFtH,IAAI,CAACyF,aAAa,GAAGzF,IAAI,CAACyF,aAAa,IAAI,CAAC,CAAC;EAG7C,KAAK,MAAMsD,GAAG,IAAItI,eAAC,CAACyE,IAAI,CAAClF,IAAI,CAAC,EAAE;IAC9B,IAAI+I,GAAG,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MAAA;MAClC,IAAI,aAAJ,IAAI,qCAAJ,IAAI,CAAEvH,GAAG,+CAAT,WAAWsD,IAAI,CAAE,YAAWgE,GAAI,4DAA2D,CAAC;MAC5FtI,eAAC,CAACwI,KAAK,CAACjJ,IAAI,CAACyF,aAAa,EAAEzF,IAAI,CAAC+I,GAAG,CAAC,CAAC;IACxC;EACF;EAEA,MAAMG,IAAI,GAAGrJ,uBAAc,CAACsJ,sBAAsB,CAACnJ,IAAI,EAAE+D,WAAW,EAAE4D,OAAO,CAAC;EAC9E,IAAI,aAAJ,IAAI,qCAAJ,IAAI,CAAElG,GAAG,+CAAT,WAAWC,KAAK,CAAE,oDAAmDwH,IAAI,CAACzD,aAAa,CAAC3C,cAAe,GAAE,CAAC;EAC1G,MAAMyB,YAAY,CAAC6E,KAAK,CAACF,IAAI,CAAC;EAC9B,OAAO3E,YAAY;AACrB,CAAC;AACD,MAAMT,oBAAoB,GAAGxE,OAAO,CAACwE,oBAAoB;AAAC;AAG1D3C,MAAM,CAACC,MAAM,CAAC7B,UAAU,EAAEF,QAAQ,EAAEC,OAAO,CAAC;AAAC,eAE9BC,UAAU;AAAA"}