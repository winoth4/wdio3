"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _utils = require("../utils");
const commands = {};
exports.commands = commands;
const ALL_PERMISSIONS_MAGIC = 'all';
const PM_ACTION = Object.freeze({
  GRANT: 'grant',
  REVOKE: 'revoke'
});
const APPOPS_ACTION = Object.freeze({
  ALLOW: 'allow',
  DENY: 'deny',
  IGNORE: 'ignore',
  DEFAULT: 'default'
});
const PERMISSION_TARGET = Object.freeze({
  PM: 'pm',
  APPOPS: 'appops'
});
const PERMISSIONS_TYPE = Object.freeze({
  DENIED: 'denied',
  GRANTED: 'granted',
  REQUESTED: 'requested'
});
async function changePermissionsViaPm(permissions, appPackage, action) {
  if (!_lodash.default.values(PM_ACTION).includes(action)) {
    throw new _driver.errors.InvalidArgumentError(`Unknown action '${action}'. ` + `Only ${JSON.stringify(_lodash.default.values(PM_ACTION))} actions are supported`);
  }
  let affectedPermissions = _lodash.default.isArray(permissions) ? permissions : [permissions];
  if (_lodash.default.toLower(permissions) === ALL_PERMISSIONS_MAGIC) {
    const dumpsys = await this.adb.shell(['dumpsys', 'package', appPackage]);
    const grantedPermissions = await this.adb.getGrantedPermissions(appPackage, dumpsys);
    if (action === PM_ACTION.GRANT) {
      const reqPermissons = await this.adb.getReqPermissions(appPackage, dumpsys);
      affectedPermissions = _lodash.default.difference(reqPermissons, grantedPermissions);
    } else {
      affectedPermissions = grantedPermissions;
    }
    if (_lodash.default.isEmpty(affectedPermissions)) {
      this.log.info(`'${appPackage}' contains no permissions to ${action}`);
      return;
    }
  }
  if (action === PM_ACTION.GRANT) {
    await this.adb.grantPermissions(appPackage, affectedPermissions);
  } else {
    await _bluebird.default.all(affectedPermissions.map(name => this.adb.revokePermission(appPackage, name)));
  }
}
async function changePermissionsViaAppops(permissions, appPackage, action) {
  if (!_lodash.default.values(APPOPS_ACTION).includes(action)) {
    throw new _driver.errors.InvalidArgumentError(`Unknown action '${action}'. ` + `Only ${JSON.stringify(_lodash.default.values(APPOPS_ACTION))} actions are supported`);
  }
  if (_lodash.default.toLower(permissions) === ALL_PERMISSIONS_MAGIC) {
    throw new _driver.errors.InvalidArgumentError(`'${ALL_PERMISSIONS_MAGIC}' permission is only supported for ` + `'${PERMISSION_TARGET.PM}' target. ` + `Check AppOpsManager.java from Android platform sources to get the full list of supported AppOps permissions`);
  }
  const promises = (_lodash.default.isArray(permissions) ? permissions : [permissions]).map(permission => this.adb.shell(['appops', 'set', appPackage, permission, action]));
  await _bluebird.default.all(promises);
}
commands.mobileChangePermissions = async function mobileChangePermissions(opts = {}) {
  const {
    permissions,
    appPackage = this.opts.appPackage,
    action = _lodash.default.toLower(opts.target) === PERMISSION_TARGET.APPOPS ? APPOPS_ACTION.ALLOW : PM_ACTION.GRANT,
    target = PERMISSION_TARGET.PM
  } = opts;
  if (_lodash.default.isNil(permissions)) {
    throw new _driver.errors.InvalidArgumentError(`'permissions' argument is required`);
  }
  if (_lodash.default.isEmpty(permissions)) {
    throw new _driver.errors.InvalidArgumentError(`'permissions' argument must not be empty`);
  }
  switch (_lodash.default.toLower(target)) {
    case PERMISSION_TARGET.PM:
      return await changePermissionsViaPm.bind(this)(permissions, appPackage, _lodash.default.toLower(action));
    case PERMISSION_TARGET.APPOPS:
      this.ensureFeatureEnabled(_utils.ADB_SHELL_FEATURE);
      return await changePermissionsViaAppops.bind(this)(permissions, appPackage, _lodash.default.toLower(action));
    default:
      throw new _driver.errors.InvalidArgumentError(`'target' argument must be one of: ${_lodash.default.values(PERMISSION_TARGET)}`);
  }
};
commands.mobileGetPermissions = async function mobileGetPermissions(opts = {}) {
  const {
    type = PERMISSIONS_TYPE.REQUESTED,
    appPackage = this.opts.appPackage
  } = opts;
  let actionFunc;
  switch (_lodash.default.toLower(type)) {
    case PERMISSIONS_TYPE.REQUESTED:
      actionFunc = pkg => this.adb.getReqPermissions(pkg);
      break;
    case PERMISSIONS_TYPE.GRANTED:
      actionFunc = pkg => this.adb.getGrantedPermissions(pkg);
      break;
    case PERMISSIONS_TYPE.DENIED:
      actionFunc = pkg => this.adb.getDeniedPermissions(pkg);
      break;
    default:
      throw new _driver.errors.InvalidArgumentError(`Unknown permissions type '${type}'. ` + `Only ${JSON.stringify(_lodash.default.values(PERMISSIONS_TYPE))} types are supported`);
  }
  return await actionFunc(appPackage);
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsIkFMTF9QRVJNSVNTSU9OU19NQUdJQyIsIlBNX0FDVElPTiIsIk9iamVjdCIsImZyZWV6ZSIsIkdSQU5UIiwiUkVWT0tFIiwiQVBQT1BTX0FDVElPTiIsIkFMTE9XIiwiREVOWSIsIklHTk9SRSIsIkRFRkFVTFQiLCJQRVJNSVNTSU9OX1RBUkdFVCIsIlBNIiwiQVBQT1BTIiwiUEVSTUlTU0lPTlNfVFlQRSIsIkRFTklFRCIsIkdSQU5URUQiLCJSRVFVRVNURUQiLCJjaGFuZ2VQZXJtaXNzaW9uc1ZpYVBtIiwicGVybWlzc2lvbnMiLCJhcHBQYWNrYWdlIiwiYWN0aW9uIiwiXyIsInZhbHVlcyIsImluY2x1ZGVzIiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiYWZmZWN0ZWRQZXJtaXNzaW9ucyIsImlzQXJyYXkiLCJ0b0xvd2VyIiwiZHVtcHN5cyIsImFkYiIsInNoZWxsIiwiZ3JhbnRlZFBlcm1pc3Npb25zIiwiZ2V0R3JhbnRlZFBlcm1pc3Npb25zIiwicmVxUGVybWlzc29ucyIsImdldFJlcVBlcm1pc3Npb25zIiwiZGlmZmVyZW5jZSIsImlzRW1wdHkiLCJsb2ciLCJpbmZvIiwiZ3JhbnRQZXJtaXNzaW9ucyIsIkIiLCJhbGwiLCJtYXAiLCJuYW1lIiwicmV2b2tlUGVybWlzc2lvbiIsImNoYW5nZVBlcm1pc3Npb25zVmlhQXBwb3BzIiwicHJvbWlzZXMiLCJwZXJtaXNzaW9uIiwibW9iaWxlQ2hhbmdlUGVybWlzc2lvbnMiLCJvcHRzIiwidGFyZ2V0IiwiaXNOaWwiLCJiaW5kIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJBREJfU0hFTExfRkVBVFVSRSIsIm1vYmlsZUdldFBlcm1pc3Npb25zIiwidHlwZSIsImFjdGlvbkZ1bmMiLCJwa2ciLCJnZXREZW5pZWRQZXJtaXNzaW9ucyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9wZXJtaXNzaW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtL2RyaXZlcic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBBREJfU0hFTExfRkVBVFVSRSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuY29uc3QgQUxMX1BFUk1JU1NJT05TX01BR0lDID0gJ2FsbCc7XG5jb25zdCBQTV9BQ1RJT04gPSBPYmplY3QuZnJlZXplKHtcbiAgR1JBTlQ6ICdncmFudCcsXG4gIFJFVk9LRTogJ3Jldm9rZScsXG59KTtcbmNvbnN0IEFQUE9QU19BQ1RJT04gPSBPYmplY3QuZnJlZXplKHtcbiAgQUxMT1c6ICdhbGxvdycsXG4gIERFTlk6ICdkZW55JyxcbiAgSUdOT1JFOiAnaWdub3JlJyxcbiAgREVGQVVMVDogJ2RlZmF1bHQnLFxufSk7XG5jb25zdCBQRVJNSVNTSU9OX1RBUkdFVCA9IE9iamVjdC5mcmVlemUoe1xuICBQTTogJ3BtJyxcbiAgQVBQT1BTOiAnYXBwb3BzJyxcbn0pO1xuY29uc3QgUEVSTUlTU0lPTlNfVFlQRSA9IE9iamVjdC5mcmVlemUoe1xuICBERU5JRUQ6ICdkZW5pZWQnLFxuICBHUkFOVEVEOiAnZ3JhbnRlZCcsXG4gIFJFUVVFU1RFRDogJ3JlcXVlc3RlZCcsXG59KTtcblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlUGVybWlzc2lvbnNWaWFQbSAocGVybWlzc2lvbnMsIGFwcFBhY2thZ2UsIGFjdGlvbikge1xuICBpZiAoIV8udmFsdWVzKFBNX0FDVElPTikuaW5jbHVkZXMoYWN0aW9uKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYFVua25vd24gYWN0aW9uICcke2FjdGlvbn0nLiBgICtcbiAgICAgIGBPbmx5ICR7SlNPTi5zdHJpbmdpZnkoXy52YWx1ZXMoUE1fQUNUSU9OKSl9IGFjdGlvbnMgYXJlIHN1cHBvcnRlZGApO1xuICB9XG5cbiAgbGV0IGFmZmVjdGVkUGVybWlzc2lvbnMgPSBfLmlzQXJyYXkocGVybWlzc2lvbnMpID8gcGVybWlzc2lvbnMgOiBbcGVybWlzc2lvbnNdO1xuICBpZiAoXy50b0xvd2VyKHBlcm1pc3Npb25zKSA9PT0gQUxMX1BFUk1JU1NJT05TX01BR0lDKSB7XG4gICAgY29uc3QgZHVtcHN5cyA9IGF3YWl0IHRoaXMuYWRiLnNoZWxsKFsnZHVtcHN5cycsICdwYWNrYWdlJywgYXBwUGFja2FnZV0pO1xuICAgIGNvbnN0IGdyYW50ZWRQZXJtaXNzaW9ucyA9IGF3YWl0IHRoaXMuYWRiLmdldEdyYW50ZWRQZXJtaXNzaW9ucyhhcHBQYWNrYWdlLCBkdW1wc3lzKTtcbiAgICBpZiAoYWN0aW9uID09PSBQTV9BQ1RJT04uR1JBTlQpIHtcbiAgICAgIGNvbnN0IHJlcVBlcm1pc3NvbnMgPSBhd2FpdCB0aGlzLmFkYi5nZXRSZXFQZXJtaXNzaW9ucyhhcHBQYWNrYWdlLCBkdW1wc3lzKTtcbiAgICAgIGFmZmVjdGVkUGVybWlzc2lvbnMgPSBfLmRpZmZlcmVuY2UocmVxUGVybWlzc29ucywgZ3JhbnRlZFBlcm1pc3Npb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZmZWN0ZWRQZXJtaXNzaW9ucyA9IGdyYW50ZWRQZXJtaXNzaW9ucztcbiAgICB9XG4gICAgaWYgKF8uaXNFbXB0eShhZmZlY3RlZFBlcm1pc3Npb25zKSkge1xuICAgICAgdGhpcy5sb2cuaW5mbyhgJyR7YXBwUGFja2FnZX0nIGNvbnRhaW5zIG5vIHBlcm1pc3Npb25zIHRvICR7YWN0aW9ufWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhY3Rpb24gPT09IFBNX0FDVElPTi5HUkFOVCkge1xuICAgIGF3YWl0IHRoaXMuYWRiLmdyYW50UGVybWlzc2lvbnMoYXBwUGFja2FnZSwgYWZmZWN0ZWRQZXJtaXNzaW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgQi5hbGwoYWZmZWN0ZWRQZXJtaXNzaW9ucy5tYXAoKG5hbWUpID0+IHRoaXMuYWRiLnJldm9rZVBlcm1pc3Npb24oYXBwUGFja2FnZSwgbmFtZSkpKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2VQZXJtaXNzaW9uc1ZpYUFwcG9wcyAocGVybWlzc2lvbnMsIGFwcFBhY2thZ2UsIGFjdGlvbikge1xuICBpZiAoIV8udmFsdWVzKEFQUE9QU19BQ1RJT04pLmluY2x1ZGVzKGFjdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBVbmtub3duIGFjdGlvbiAnJHthY3Rpb259Jy4gYCArXG4gICAgICBgT25seSAke0pTT04uc3RyaW5naWZ5KF8udmFsdWVzKEFQUE9QU19BQ1RJT04pKX0gYWN0aW9ucyBhcmUgc3VwcG9ydGVkYCk7XG4gIH1cbiAgaWYgKF8udG9Mb3dlcihwZXJtaXNzaW9ucykgPT09IEFMTF9QRVJNSVNTSU9OU19NQUdJQykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYCcke0FMTF9QRVJNSVNTSU9OU19NQUdJQ30nIHBlcm1pc3Npb24gaXMgb25seSBzdXBwb3J0ZWQgZm9yIGAgK1xuICAgICAgYCcke1BFUk1JU1NJT05fVEFSR0VULlBNfScgdGFyZ2V0LiBgICtcbiAgICAgIGBDaGVjayBBcHBPcHNNYW5hZ2VyLmphdmEgZnJvbSBBbmRyb2lkIHBsYXRmb3JtIHNvdXJjZXMgdG8gZ2V0IHRoZSBmdWxsIGxpc3Qgb2Ygc3VwcG9ydGVkIEFwcE9wcyBwZXJtaXNzaW9uc2ApO1xuICB9XG5cbiAgY29uc3QgcHJvbWlzZXMgPSAoXy5pc0FycmF5KHBlcm1pc3Npb25zKSA/IHBlcm1pc3Npb25zIDogW3Blcm1pc3Npb25zXSlcbiAgICAubWFwKChwZXJtaXNzaW9uKSA9PiB0aGlzLmFkYi5zaGVsbChbJ2FwcG9wcycsICdzZXQnLCBhcHBQYWNrYWdlLCBwZXJtaXNzaW9uLCBhY3Rpb25dKSk7XG4gIGF3YWl0IEIuYWxsKHByb21pc2VzKTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDaGFuZ2VQZXJtaXNzaW9uc09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ3xBcnJheTxzdHJpbmc+fSBwZXJtaXNzaW9uc1xuICogSWYgYHRhcmdldGAgaXMgc2V0IHRvICdwbSc6XG4gKiAgIFRoZSBmdWxsIG5hbWUgb2YgdGhlIHBlcm1pc3Npb24gdG8gYmUgY2hhbmdlZFxuICogb3IgYSBsaXN0IG9mIHBlcm1pc3Npb25zLiBDaGVjayBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC9NYW5pZmVzdC5wZXJtaXNzaW9uXG4gKiB0byBnZXQgdGhlIGZ1bGwgbGlzdCBvZiBzdGFuZGFyZCBBbmRyb2lkIHBlcm1zc2lvbiBuYW1lcy4gTWFuZGF0b3J5IGFyZ3VtZW50LlxuICogSWYgJ2FsbCcgbWFnaWMgc3RyaW5nIGlzIHBhc3NlZCB0aGVuIHRoZSBjaG9zZW4gYWN0aW9uIGlzIGdvaW5nIHRvIGJlIGFwcGxpZWQgdG8gYWxsXG4gKiBwZXJtaXNpc29ucyByZXF1ZXN0ZWQvZ3JhbnRlZCBieSAnYXBwUGFja2FnZScuXG4gKiBJZiBgdGFyZ2V0YCBpcyBzZXQgdG8gJ2FwcG9wcyc6XG4gKiAgIFRoZSBmdWxsIG5hbWUgb2YgdGhlIGFwcG9wcyBwZXJtaXNzaW9uIHRvIGJlIGNoYW5nZWRcbiAqIG9yIGEgbGlzdCBvZiBwZXJtaXNzaW9ucy4gQ2hlY2sgQXBwT3BzTWFuYWdlci5qYXZhIHNvdXJjZXMgdG8gZ2V0IHRoZSBmdWxsIGxpc3Qgb2ZcbiAqIHN1cHBvcnRlZCBhcHBvcHMgcGVybWlzc2lvbiBuYW1lcyBmb3IgdGhlIGdpdmVuIEFuZHJvaWQgcGtsYXRmb3JtLlxuICogRXhhbXBsZXM6ICdBQ1RJVklUWV9SRUNPR05JVElPTicsICdTTVNfRklOQU5DSUFMX1RSQU5TQUNUSU9OUycsICdSRUFEX1NNUycsICdBQ0NFU1NfTk9USUZJQ0FUSU9OUycuXG4gKiBUaGUgJ2FsbCcgbWFnaWMgc3RyaW5nIGlzIHVuc3VwcG9ydGVkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFwcFBhY2thZ2UgW3RoaXMub3B0cy5hcHBQYWNrYWdlXSBUaGUgYXBwbGljYXRpb24gcGFja2FnZSB0byBzZXQgY2hhbmdlXG4gKiBwZXJtaXNzaW9ucyBvbi4gRGVmYXVsdHMgdG8gdGhlIHBhY2thZ2UgbmFtZSB1bmRlciB0ZXN0LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFjdGlvbiBbZ3JhbnR8YWxsb3ddIE9uZSBvZiBgUE1fQUNUSU9OYCB2YWx1ZXMgaWYgYHRhcmdldGAgaXMgc2V0IHRvICdwbScsXG4gKiBvdGhlcndpc2Ugb25lIG9mIGBBUFBPUFNfQUNUSU9OYCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0YXJnZXQgW3BtXSBFaXRoZXIgJ3BtJyBvciAnYXBwb3BzJy4gVGhlICdhcHBvcHMnIG9uZSByZXF1aXJlc1xuICogJ2FkYl9zaGVsbCcgc2VydmVyIHNlY3VyaXR5IG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICovXG5cbi8qKlxuICogQ2hhbmdlcyBwYWNrYWdlIHBlcm1pc3Npb25zIGluIHJ1bnRpbWUuXG4gKlxuICogQHBhcmFtIHs/Q2hhbmdlUGVybWlzc2lvbnNPcHRpb25zfSBvcHRzIC0gQXZhaWxhYmxlIG9wdGlvbnMgbWFwcGluZy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGVyZSB3YXMgYSBmYWlsdXJlIHdoaWxlIGNoYW5naW5nIHBlcm1pc3Npb25zXG4gKi9cbmNvbW1hbmRzLm1vYmlsZUNoYW5nZVBlcm1pc3Npb25zID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlQ2hhbmdlUGVybWlzc2lvbnMgKG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgcGVybWlzc2lvbnMsXG4gICAgYXBwUGFja2FnZSA9IHRoaXMub3B0cy5hcHBQYWNrYWdlLFxuICAgIGFjdGlvbiA9IF8udG9Mb3dlcihvcHRzLnRhcmdldCkgPT09IFBFUk1JU1NJT05fVEFSR0VULkFQUE9QUyA/IEFQUE9QU19BQ1RJT04uQUxMT1cgOiBQTV9BQ1RJT04uR1JBTlQsXG4gICAgdGFyZ2V0ID0gUEVSTUlTU0lPTl9UQVJHRVQuUE0sXG4gIH0gPSBvcHRzO1xuICBpZiAoXy5pc05pbChwZXJtaXNzaW9ucykpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGAncGVybWlzc2lvbnMnIGFyZ3VtZW50IGlzIHJlcXVpcmVkYCk7XG4gIH1cbiAgaWYgKF8uaXNFbXB0eShwZXJtaXNzaW9ucykpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGAncGVybWlzc2lvbnMnIGFyZ3VtZW50IG11c3Qgbm90IGJlIGVtcHR5YCk7XG4gIH1cblxuICBzd2l0Y2ggKF8udG9Mb3dlcih0YXJnZXQpKSB7XG4gICAgY2FzZSBQRVJNSVNTSU9OX1RBUkdFVC5QTTpcbiAgICAgIHJldHVybiBhd2FpdCBjaGFuZ2VQZXJtaXNzaW9uc1ZpYVBtLmJpbmQodGhpcykocGVybWlzc2lvbnMsIGFwcFBhY2thZ2UsIF8udG9Mb3dlcihhY3Rpb24pKTtcbiAgICBjYXNlIFBFUk1JU1NJT05fVEFSR0VULkFQUE9QUzpcbiAgICAgIHRoaXMuZW5zdXJlRmVhdHVyZUVuYWJsZWQoQURCX1NIRUxMX0ZFQVRVUkUpO1xuICAgICAgcmV0dXJuIGF3YWl0IGNoYW5nZVBlcm1pc3Npb25zVmlhQXBwb3BzLmJpbmQodGhpcykocGVybWlzc2lvbnMsIGFwcFBhY2thZ2UsIF8udG9Mb3dlcihhY3Rpb24pKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgJ3RhcmdldCcgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2Y6ICR7Xy52YWx1ZXMoUEVSTUlTU0lPTl9UQVJHRVQpfWApO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEdldFBlcm1pc3Npb25zT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgW3JlcXVlc3RlZF0gLSBPbmUgb2YgcG9zc2libGUgcGVybWlzc2lvbiB0eXBlcyB0byBnZXQuXG4gKiBDYW4gYmUgYW55IG9mIGBQRVJNSVNTSU9OU19UWVBFYCB2YWx1ZXMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYXBwUGFja2FnZSBbdGhpcy5vcHRzLmFwcFBhY2thZ2VdIC0gVGhlIGFwcGxpY2F0aW9uIHBhY2thZ2UgdG8gc2V0IGNoYW5nZVxuICogcGVybWlzc2lvbnMgb24uIERlZmF1bHRzIHRvIHRoZSBwYWNrYWdlIG5hbWUgdW5kZXIgdGVzdC5cbiAqL1xuXG4vKipcbiAqIEdldHMgcnVudGltZSBwZXJtaXNzaW9ucyBsaXN0IGZvciB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gcGFja2FnZS5cbiAqXG4gKiBAcGFyYW0ge0dldFBlcm1pc3Npb25zT3B0aW9uc30gb3B0cyAtIEF2YWlsYWJsZSBvcHRpb25zIG1hcHBpbmcuXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gVGhlIGxpc3Qgb2YgcmV0cmlldmVkIHBlcm1pc3Npb25zIGZvciB0aGUgZ2l2ZW4gdHlwZVxuICogKGNhbiBhbHNvIGJlIGVtcHR5KS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgZ2V0dGluZyBwZXJtaXNzaW9ucy5cbiAqL1xuY29tbWFuZHMubW9iaWxlR2V0UGVybWlzc2lvbnMgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVHZXRQZXJtaXNzaW9ucyAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlID0gUEVSTUlTU0lPTlNfVFlQRS5SRVFVRVNURUQsXG4gICAgYXBwUGFja2FnZSA9IHRoaXMub3B0cy5hcHBQYWNrYWdlLFxuICB9ID0gb3B0cztcblxuICBsZXQgYWN0aW9uRnVuYztcbiAgc3dpdGNoIChfLnRvTG93ZXIodHlwZSkpIHtcbiAgICBjYXNlIFBFUk1JU1NJT05TX1RZUEUuUkVRVUVTVEVEOlxuICAgICAgYWN0aW9uRnVuYyA9IChwa2cpID0+IHRoaXMuYWRiLmdldFJlcVBlcm1pc3Npb25zKHBrZyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFBFUk1JU1NJT05TX1RZUEUuR1JBTlRFRDpcbiAgICAgIGFjdGlvbkZ1bmMgPSAocGtnKSA9PiB0aGlzLmFkYi5nZXRHcmFudGVkUGVybWlzc2lvbnMocGtnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgUEVSTUlTU0lPTlNfVFlQRS5ERU5JRUQ6XG4gICAgICBhY3Rpb25GdW5jID0gKHBrZykgPT4gdGhpcy5hZGIuZ2V0RGVuaWVkUGVybWlzc2lvbnMocGtnKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBVbmtub3duIHBlcm1pc3Npb25zIHR5cGUgJyR7dHlwZX0nLiBgICtcbiAgICAgICAgYE9ubHkgJHtKU09OLnN0cmluZ2lmeShfLnZhbHVlcyhQRVJNSVNTSU9OU19UWVBFKSl9IHR5cGVzIGFyZSBzdXBwb3J0ZWRgKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgYWN0aW9uRnVuYyhhcHBQYWNrYWdlKTtcbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE1BQU1BLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFBQztBQUVwQixNQUFNQyxxQkFBcUIsR0FBRyxLQUFLO0FBQ25DLE1BQU1DLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUM7RUFDOUJDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLE1BQU0sRUFBRTtBQUNWLENBQUMsQ0FBQztBQUNGLE1BQU1DLGFBQWEsR0FBR0osTUFBTSxDQUFDQyxNQUFNLENBQUM7RUFDbENJLEtBQUssRUFBRSxPQUFPO0VBQ2RDLElBQUksRUFBRSxNQUFNO0VBQ1pDLE1BQU0sRUFBRSxRQUFRO0VBQ2hCQyxPQUFPLEVBQUU7QUFDWCxDQUFDLENBQUM7QUFDRixNQUFN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