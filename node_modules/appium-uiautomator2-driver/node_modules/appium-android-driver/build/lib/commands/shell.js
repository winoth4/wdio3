"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _support = require("@appium/support");
var _driver = require("appium/driver");
var _utils = require("../utils");
const commands = {};
exports.commands = commands;
commands.mobileShell = async function mobileShell(opts = {}) {
  this.ensureFeatureEnabled(_utils.ADB_SHELL_FEATURE);
  const {
    command,
    args = [],
    timeout = 20000,
    includeStderr
  } = opts;
  if (!_lodash.default.isString(command)) {
    throw new _driver.errors.InvalidArgumentError(`The 'command' argument is mandatory`);
  }
  const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];
  this.log.debug(`Running '${this.adb.executable.path} ${_support.util.quote(adbArgs)}'`);
  try {
    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
      timeout
    });
    if (includeStderr) {
      return {
        stdout,
        stderr
      };
    }
    return stdout;
  } catch (err) {
    this.log.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsIm1vYmlsZVNoZWxsIiwib3B0cyIsImVuc3VyZUZlYXR1cmVFbmFibGVkIiwiQURCX1NIRUxMX0ZFQVRVUkUiLCJjb21tYW5kIiwiYXJncyIsInRpbWVvdXQiLCJpbmNsdWRlU3RkZXJyIiwiXyIsImlzU3RyaW5nIiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJhZGJBcmdzIiwiYWRiIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwiaXNBcnJheSIsImxvZyIsImRlYnVnIiwicGF0aCIsInV0aWwiLCJxdW90ZSIsInN0ZG91dCIsInN0ZGVyciIsImV4ZWMiLCJlcnIiLCJlcnJvckFuZFRocm93IiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9zaGVsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS9kcml2ZXInO1xuaW1wb3J0IHsgQURCX1NIRUxMX0ZFQVRVUkUgfSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLm1vYmlsZVNoZWxsID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlU2hlbGwgKG9wdHMgPSB7fSkge1xuICB0aGlzLmVuc3VyZUZlYXR1cmVFbmFibGVkKEFEQl9TSEVMTF9GRUFUVVJFKTtcblxuICBjb25zdCB7XG4gICAgY29tbWFuZCxcbiAgICBhcmdzID0gW10sXG4gICAgdGltZW91dCA9IDIwMDAwLFxuICAgIGluY2x1ZGVTdGRlcnIsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghXy5pc1N0cmluZyhjb21tYW5kKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYFRoZSAnY29tbWFuZCcgYXJndW1lbnQgaXMgbWFuZGF0b3J5YCk7XG4gIH1cblxuICBjb25zdCBhZGJBcmdzID0gW1xuICAgIC4uLnRoaXMuYWRiLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MsXG4gICAgJ3NoZWxsJyxcbiAgICBjb21tYW5kLFxuICAgIC4uLihfLmlzQXJyYXkoYXJncykgPyBhcmdzIDogW2FyZ3NdKVxuICBdO1xuICB0aGlzLmxvZy5kZWJ1ZyhgUnVubmluZyAnJHt0aGlzLmFkYi5leGVjdXRhYmxlLnBhdGh9ICR7dXRpbC5xdW90ZShhZGJBcmdzKX0nYCk7XG4gIHRyeSB7XG4gICAgY29uc3Qge3N0ZG91dCwgc3RkZXJyfSA9IGF3YWl0IGV4ZWModGhpcy5hZGIuZXhlY3V0YWJsZS5wYXRoLCBhZGJBcmdzLCB7dGltZW91dH0pO1xuICAgIGlmIChpbmNsdWRlU3RkZXJyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGRvdXQsXG4gICAgICAgIHN0ZGVyclxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ZG91dDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhpcy5sb2cuZXJyb3JBbmRUaHJvdyhgQ2Fubm90IGV4ZWN1dGUgdGhlICcke2NvbW1hbmR9JyBzaGVsbCBjb21tYW5kLiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX0uIGAgK1xuICAgICAgYFN0ZE91dDogJHtlcnIuc3Rkb3V0fS4gU3RkRXJyOiAke2Vyci5zdGRlcnJ9YCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTUEsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUFDO0FBRXBCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxlQUFlQSxXQUFXLENBQUVDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUM1RCxJQUFJLENBQUNDLG9CQUFvQixDQUFDQyx3QkFBaUIsQ0FBQztFQUU1QyxNQUFNO0lBQ0pDLE9BQU87SUFDUEMsSUFBSSxHQUFHLEVBQUU7SUFDVEMsT0FBTyxHQUFHLEtBQUs7SUFDZkM7RUFDRixDQUFDLEdBQUdOLElBQUk7RUFFUixJQUFJLENBQUNPLGVBQUMsQ0FBQ0MsUUFBUSxDQUFDTCxPQUFPLENBQUMsRUFBRTtJQUN4QixNQUFNLElBQUlNLGNBQU0sQ0FBQ0Msb0JBQW9CLENBQUUscUNBQW9DLENBQUM7RUFDOUU7RUFFQSxNQUFNQyxPQUFPLEdBQUcsQ0FDZCxHQUFHLElBQUksQ0FBQ0MsR0FBRyxDQUFDQyxVQUFVLENBQUNDLFdBQVcsRUFDbEMsT0FBTyxFQUNQWCxPQUFPLEVBQ1AsSUFBSUksZUFBQyxDQUFDUSxPQUFPLENBQUNYLElBQUksQ0FBQyxHQUFHQSxJQUFJLEdBQUcsQ0FBQ0EsSUFBSSxDQUFDLENBQUMsQ0FDckM7RUFDRCxJQUFJLENBQUNZLEdBQUcsQ0FBQ0MsS0FBSyxDQUFFLFlBQVcsSUFBSSxDQUFDTCxHQUFHLENBQUNDLFVBQVUsQ0FBQ0ssSUFBSyxJQUFHQyxhQUFJLENBQUNDLEtBQUssQ0FBQ1QsT0FBTyxDQUFFLEdBQUUsQ0FBQztFQUM5RSxJQUFJO0lBQ0YsTUFBTTtNQUFDVSxNQUFNO01BQUVDO0lBQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQUMsa0JBQUksRUFBQyxJQUFJLENBQUNYLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDSyxJQUFJLEVBQUVQLE9BQU8sRUFBRTtNQUFDTjtJQUFPLENBQUMsQ0FBQztJQUNqRixJQUFJQyxhQUFhLEVBQUU7TUFDakIsT0FBTztRQUNMZSxNQUFNO1FBQ05DO01BQ0YsQ0FBQztJQUNIO0lBQ0EsT0FBT0QsTUFBTTtFQUNmLENBQUMsQ0FBQyxPQUFPRyxHQUFHLEVBQUU7SUFDWixJQUFJLENBQUNSLEdBQUcsQ0FBQ1MsYUFBYSxDQUFFLHVCQUFzQnRCLE9BQVEsbUJBQWtCLEdBQ3JFLG1CQUFrQnFCLEdBQUcsQ0FBQ0UsT0FBUSxJQUFHLEdBQ2pDLFdBQVVGLEdBQUcsQ0FBQ0gsTUFBTyxhQUFZRyxHQUFHLENBQUNGLE1BQU8sRUFBQyxDQUFDO0VBQ25EO0FBQ0YsQ0FBQztBQUFDLGVBR2F4QixRQUFRO0FBQUEifQ==