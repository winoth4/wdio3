"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
const NO_VALUE_ARG_TYPE = 'sn';
const SUPPORTED_EXTRA_TYPES = ['s', NO_VALUE_ARG_TYPE, 'z', 'i', 'l', 'f', 'u', 'cn', 'ia', 'ial', 'la', 'lal', 'fa', 'fal', 'sa', 'sal'];
const API_LEVEL_ANDROID_8 = 26;
const commands = {};
exports.commands = commands;
function parseIntentSpec(opts = {}) {
  const {
    intent,
    action,
    uri,
    mimeType,
    identifier,
    categories,
    component,
    extras,
    flags
  } = opts;
  const resultArgs = [];
  if (intent) {
    resultArgs.push(intent);
  }
  if (action) {
    resultArgs.push('-a', action);
  }
  if (uri) {
    resultArgs.push('-d', uri);
  }
  if (mimeType) {
    resultArgs.push('-t', mimeType);
  }
  if (!_lodash.default.isNil(identifier)) {
    resultArgs.push('-i', identifier);
  }
  if (categories) {
    if (_lodash.default.isArray(categories)) {
      resultArgs.push(..._lodash.default.flatMap(categories.map(cName => ['-c', cName])));
    } else {
      resultArgs.push('-c', categories);
    }
  }
  if (component) {
    resultArgs.push('-n', component);
  }
  if (opts.package) {
    resultArgs.push('-p', opts.package);
  }
  if (extras) {
    if (!_lodash.default.isArray(extras)) {
      throw new _driver.errors.InvalidArgumentError(`'extras' must be an array`);
    }
    for (const item of extras) {
      if (!_lodash.default.isArray(item)) {
        throw new _driver.errors.InvalidArgumentError(`Extra argument '${item}' must be an array`);
      }
      const [type, key, value] = item;
      if (!_lodash.default.includes(SUPPORTED_EXTRA_TYPES, type)) {
        throw new _driver.errors.InvalidArgumentError(`Extra argument type '${type}' is not known. ` + `Supported intent argument types are: ${SUPPORTED_EXTRA_TYPES}`);
      }
      if (_lodash.default.isEmpty(key) || _lodash.default.isString(key) && _lodash.default.trim(key) === '') {
        throw new _driver.errors.InvalidArgumentError(`Extra argument's key in '${JSON.stringify(item)}' must be a valid string identifier`);
      }
      if (type === NO_VALUE_ARG_TYPE) {
        resultArgs.push(`--e${type}`, key);
      } else if (_lodash.default.isUndefined(value)) {
        throw new _driver.errors.InvalidArgumentError(`Intent argument type '${type}' in '${JSON.stringify(item)}' requires a ` + `valid value to be provided`);
      } else {
        resultArgs.push(`--e${type}`, key, value);
      }
    }
  }
  if (flags) {
    resultArgs.push('-f', flags);
  }
  return resultArgs;
}
commands.mobileStartActivity = async function mobileStartActivity(opts = {}) {
  const {
    user,
    wait,
    stop,
    windowingMode,
    activityType,
    display
  } = opts;
  const cmd = ['am', (await this.adb.getApiLevel()) < API_LEVEL_ANDROID_8 ? 'start' : 'start-activity'];
  if (!_lodash.default.isNil(user)) {
    cmd.push('--user', user);
  }
  if (wait) {
    cmd.push('-W');
  }
  if (stop) {
    cmd.push('-S');
  }
  if (!_lodash.default.isNil(windowingMode)) {
    cmd.push('--windowingMode', windowingMode);
  }
  if (!_lodash.default.isNil(activityType)) {
    cmd.push('--activityType', activityType);
  }
  if (!_lodash.default.isNil(display)) {
    cmd.push('--display', display);
  }
  cmd.push(...parseIntentSpec(opts));
  return await this.adb.shell(cmd);
};
commands.mobileBroadcast = async function mobileBroadcast(opts = {}) {
  const {
    user,
    receiverPermission,
    allowBackgroundActivityStarts
  } = opts;
  const cmd = ['am', 'broadcast'];
  if (!_lodash.default.isNil(user)) {
    cmd.push('--user', user);
  }
  if (receiverPermission) {
    cmd.push('--receiver-permission', receiverPermission);
  }
  if (allowBackgroundActivityStarts) {
    cmd.push('--allow-background-activity-starts');
  }
  cmd.push(...parseIntentSpec(opts));
  return await this.adb.shell(cmd);
};
commands.mobileStartService = async function mobileStartService(opts = {}) {
  const {
    user,
    foreground
  } = opts;
  const cmd = ['am'];
  if ((await this.adb.getApiLevel()) < API_LEVEL_ANDROID_8) {
    cmd.push('startservice');
  } else {
    cmd.push(foreground ? 'start-foreground-service' : 'start-service');
  }
  if (!_lodash.default.isNil(user)) {
    cmd.push('--user', user);
  }
  cmd.push(...parseIntentSpec(opts));
  return await this.adb.shell(cmd);
};
commands.mobileStopService = async function mobileStopService(opts = {}) {
  const {
    user
  } = opts;
  const cmd = ['am', (await this.adb.getApiLevel()) < API_LEVEL_ANDROID_8 ? 'stopservice' : 'stop-service'];
  if (!_lodash.default.isNil(user)) {
    cmd.push('--user', user);
  }
  cmd.push(...parseIntentSpec(opts));
  return await this.adb.shell(cmd);
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,