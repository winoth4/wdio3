"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.COMMAND_TYPES = exports.AndroidBootstrap = void 0;
require("source-map-support/register");
var _uiautomator = _interopRequireDefault(require("./uiautomator"));
var _net = _interopRequireDefault(require("net"));
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _support = require("@appium/support");
const log = _support.logger.getLogger('AndroidBootstrap');
const COMMAND_TYPES = {
  ACTION: 'action',
  SHUTDOWN: 'shutdown'
};
exports.COMMAND_TYPES = COMMAND_TYPES;
const SEND_COMMAND_TIMEOUT = 1 * 60 * 1000;
const getModuleRoot = _lodash.default.memoize(async function getModuleRoot() {
  let currentDir = _path.default.dirname(_path.default.resolve(__filename));
  let isAtFsRoot = false;
  while (!isAtFsRoot) {
    const manifestPath = _path.default.join(currentDir, 'package.json');
    try {
      if ((await _support.fs.exists(manifestPath)) && JSON.parse(await _support.fs.readFile(manifestPath, 'utf8')).name === 'appium-android-driver') {
        return currentDir;
      }
    } catch (ign) {}
    currentDir = _path.default.dirname(currentDir);
    isAtFsRoot = currentDir.length <= _path.default.dirname(currentDir).length;
  }
  throw new Error('Cannot find the root folder of the appium-android-driver Node.js module');
});
class AndroidBootstrap {
  constructor(adb, systemPort = 4724, webSocket = undefined) {
    this.adb = adb;
    this.systemPort = systemPort;
    this.webSocket = webSocket;
    this.ignoreUnexpectedShutdown = false;
  }
  get onUnexpectedShutdown() {
    if (!this._onUnexpectedShutdownPromise) {
      let reject;
      this._onUnexpectedShutdownPromise = new _bluebird.default(function _onUnexpectedShutdownPromise(_resolve, _reject) {
        reject = _reject;
      });
      this._onUnexpectedShutdownPromise.cancel = reject;
    }
    return this._onUnexpectedShutdownPromise;
  }
  async start(appPackage, disableAndroidWatchers = false, acceptSslCerts = false) {
    try {
      const startDetector = s => /Appium Socket Server Ready/.test(s);
      const bootstrapJar = _path.default.resolve(await getModuleRoot(), 'bootstrap', 'bin', 'AppiumBootstrap.jar');
      await this.init();
      await this.adb.forwardPort(this.systemPort, 4724);
      this.process = await this.uiAutomator.start(bootstrapJar, 'io.appium.android.bootstrap.Bootstrap', startDetector, '-e', 'pkg', appPackage, '-e', 'disableAndroidWatchers', disableAndroidWatchers, '-e', 'acceptSslCerts', acceptSslCerts);
      this.process.on('output', (stdout, stderr) => {
        const alertRe = /Emitting system alert message/;
        if (alertRe.test(stdout)) {
          log.debug('Emitting alert message...');
          if (this.webSocket) {
            this.webSocket.sockets.emit('alert', {
              message: stdout
            });
          }
        }
        let stdoutLines = (stdout || '').split('\n');
        const uiautoLog = /\[APPIUM-UIAUTO\](.+)\[\/APPIUM-UIAUTO\]/;
        for (let line of stdoutLines) {
          if (line.trim()) {
            if (uiautoLog.test(line)) {
              let innerLine = uiautoLog.exec(line)[1].trim();
              let logMethod = log.info.bind(log);
              if (/\[debug\]/.test(innerLine)) {
                logMethod = log.debug.bind(log);
              }
              logMethod(`[BOOTSTRAP LOG] ${innerLine}`);
            } else {
              log.debug(`[UIAUTO STDOUT] ${line}`);
            }
          }
        }
        let stderrLines = (stderr || '').split('\n');
        for (let line of stderrLines) {
          if (line.trim()) {
            log.debug(`[UIAUTO STDERR] ${line}`);
          }
        }
      });
      return await new _bluebird.default((resolve, reject) => {
        try {
          this.socketClient = _net.default.connect(this.systemPort, '127.0.0.1');
          this.socketClient.on('error', err => {
            if (!this.ignoreUnexpectedShutdown) {
              throw new Error(`Android bootstrap socket crashed: ${err}`);
            }
          });
          this.socketClient.once('connect', () => {
            log.info('Android bootstrap socket is now connected');
            resolve();
          });
        } catch (err) {
          reject(err);
        }
      });
    } catch (err) {
      log.errorAndThrow(`Error occured while starting AndroidBootstrap. Original error: ${err}`);
    }
  }
  async sendCommand(type, extra = {}) {
    if (!this.socketClient) {
      throw new Error('Socket connection closed unexpectedly');
    }
    return await new _bluebird.default((resolve, reject) => {
      let cmd = Object.assign({
        cmd: type
      }, extra);
      let cmdJson = `${JSON.stringify(cmd)} \n`;
      log.debug(`Sending command to android: ${_lodash.default.truncate(cmdJson, {
        length: 1000
      }).trim()}`);
      this.socketClient.write(cmdJson);
      this.socketClient.setEncoding('utf8');
      let streamData = '';
      let sendCommandTimeoutHandler = null;
      this.socketClient.on('data', data => {
        if (sendCommandTimeoutHandler) {
          clearTimeout(sendCommandTimeoutHandler);
        }
        log.debug('Received command result from bootstrap');
        try {
          streamData = JSON.parse(streamData + data);
          this.socketClient.removeAllListeners('data');
          if (streamData.status === 0) {
            return resolve(streamData.value);
          }
          reject((0, _driver.errorFromCode)(streamData.status, streamData.value));
        } catch (err) {
          if (!_lodash.default.isString(streamData)) {
            log.error('Got an unexpected error inside socket listener');
            log.error(err.stack);
            return reject((0, _driver.errorFromCode)(13, err.message));
          }
          log.debug(`Stream still not complete, waiting up to ${SEND_COMMAND_TIMEOUT}ms for the data to arrive`);
          streamData += data;
          sendCommandTimeoutHandler = setTimeout(() => {
            const errMsg = `Server socket stopped responding. The recent response was '${streamData}'`;
            log.error(errMsg);
            this.socketClient.removeAllListeners('data');
            reject((0, _driver.errorFromCode)(13, errMsg));
          }, SEND_COMMAND_TIMEOUT);
        }
      });
    });
  }
  async sendAction(action, params = {}) {
    let extra = {
      action,
      params
    };
    return await this.sendCommand(COMMAND_TYPES.ACTION, extra);
  }
  async shutdown() {
    if (!this.uiAutomator) {
      log.warn('Cannot shut down Android bootstrap; it has already shut down');
      return;
    }
    this.uiAutomator.removeAllListeners(_uiautomator.default.EVENT_CHANGED);
    if (this.socketClient) {
      await this.sendCommand(COMMAND_TYPES.SHUTDOWN);
    }
    await this.uiAutomator.shutdown();
    this.uiAutomator = null;
  }
  async init() {
    this.uiAutomator = new _uiautomator.default(this.adb);
    this.uiAutomator.on(_uiautomator.default.EVENT_CHANGED, msg => {
      if (msg.state === _uiautomator.default.STATE_STOPPED) {
        this.uiAutomator = null;
        this.onUnexpectedShutdown.cancel(new Error('UiAUtomator shut down unexpectedly'));
      }
    });
  }
  set ignoreUnexpectedShutdown(ignore) {
    log.debug(`${ignore ? 'Ignoring' : 'Watching for'} bootstrap disconnect`);
    this._ignoreUnexpectedShutdown = ignore;
  }
  get ignoreUnexpectedShutdown() {
    return this._ignoreUnexpectedShutdown;
  }
}
exports.AndroidBootstrap = AndroidBootstrap;
var _default = AndroidBootstrap;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,